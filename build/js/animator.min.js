/*!
  * https://github.com/paulmillr/es6-shim
  * @license es6-shim Copyright 2013-2015 by Paul Miller (http://paulmillr.com)
  *   and contributors,  MIT License
  * es6-shim: v0.27.1
  * see https://github.com/paulmillr/es6-shim/blob/0.27.1/LICENSE
  * Details and documentation:
  * https://github.com/paulmillr/es6-shim/
  */
(function(e,t){if(typeof define==="function"&&define.amd){define(t)}else if(typeof exports==="object"){module.exports=t()}else{e.returnExports=t()}})(this,function(){"use strict";var e=function Kt(e){return function t(){return!e.apply(this,arguments)}};var t=function(e){try{e();return false}catch(t){return true}};var r=function Bt(e){try{return e()}catch(t){return false}};var n=e(t);var o=function(){return!t(function(){Object.defineProperty({},"x",{})})};var i=!!Object.defineProperty&&o();var a=Function.call.bind(Array.prototype.forEach);var u=Function.call.bind(Array.prototype.map);var s=Function.call.bind(Array.prototype.reduce);var f=Function.call.bind(Array.prototype.filter);var c=function(e,t,r,n){if(!n&&t in e){return}if(i){Object.defineProperty(e,t,{configurable:true,enumerable:false,writable:true,value:r})}else{e[t]=r}};var l=function(e,t){a(Object.keys(t),function(r){var n=t[r];c(e,r,n,false)})};var p=Object.create||function(e,t){function r(){}r.prototype=e;var n=new r;if(typeof t!=="undefined"){l(n,t)}return n};var v=function(e,t){if(!Object.setPrototypeOf){return false}return r(function(){var r=function n(t){var r=new e(t);Object.setPrototypeOf(r,n.prototype);return r};r.prototype=p(e.prototype,{constructor:{value:e}});return t(r)})};var h=function(){return String.prototype.startsWith&&t(function(){"/a/".startsWith(/a/)})};var y=function(){return String.prototype.startsWith&&"abc".startsWith("a",Infinity)===false}();var b=new Function("return this;");var g=b();var d=g.isFinite;var m=function(){return this===null}.call(null);var O=h()&&y;var w=Function.call.bind(String.prototype.indexOf);var j=Function.call.bind(Object.prototype.toString);var M=Function.call.bind(Object.prototype.hasOwnProperty);var T;var I=function(){};var S=g.Symbol||{};var E=S.species||"@@species";var x={object:function(e){return e!==null&&typeof e==="object"},string:function(e){return j(e)==="[object String]"},regex:function(e){return j(e)==="[object RegExp]"},symbol:function(e){return typeof g.Symbol==="function"&&typeof e==="symbol"}};var _=Number.isNaN||function Jt(e){return e!==e};var P=Number.isFinite||function Qt(e){return typeof e==="number"&&d(e)};var N={getter:function(e,t,r){if(!i){throw new TypeError("getters require true ES5 support")}Object.defineProperty(e,t,{configurable:true,enumerable:false,get:r})},proxy:function(e,t,r){if(!i){throw new TypeError("getters require true ES5 support")}var n=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(r,t,{configurable:n.configurable,enumerable:n.enumerable,get:function o(){return e[t]},set:function a(r){e[t]=r}})},redefine:function(e,t,r){if(i){var n=Object.getOwnPropertyDescriptor(e,t);n.value=r;Object.defineProperty(e,t,n)}else{e[t]=r}},preserveToString:function(e,t){c(e,"toString",t.toString.bind(t),true)}};var C=function Yt(e,t,r){var n=e[t];c(e,t,r,true);N.preserveToString(e[t],n)};var A=x.symbol(S.iterator)?S.iterator:"_es6-shim iterator_";if(g.Set&&typeof(new g.Set)["@@iterator"]==="function"){A="@@iterator"}var k=function(e,t){var r=t||function o(){return this};var n={};n[A]=r;l(e,n);if(!e[A]&&x.symbol(A)){e[A]=r}};var R=function er(e){var t=j(e);var r=t==="[object Arguments]";if(!r){r=t!=="[object Array]"&&e!==null&&typeof e==="object"&&typeof e.length==="number"&&e.length>=0&&j(e.callee)==="[object Function]"}return r};var L=Function.call.bind(Function.apply);var z={Call:function tr(e,t){var r=arguments.length>2?arguments[2]:[];if(!z.IsCallable(e)){throw new TypeError(e+" is not a function")}return L(e,t,r)},RequireObjectCoercible:function(e,t){if(e==null){throw new TypeError(t||"Cannot call method on "+e)}},TypeIsObject:function(e){return e!=null&&Object(e)===e},ToObject:function(e,t){z.RequireObjectCoercible(e,t);return Object(e)},IsCallable:function(e){return typeof e==="function"&&j(e)==="[object Function]"},ToInt32:function(e){return z.ToNumber(e)>>0},ToUint32:function(e){return z.ToNumber(e)>>>0},ToNumber:function(e){if(j(e)==="[object Symbol]"){throw new TypeError("Cannot convert a Symbol value to a number")}return+e},ToInteger:function(e){var t=z.ToNumber(e);if(_(t)){return 0}if(t===0||!P(t)){return t}return(t>0?1:-1)*Math.floor(Math.abs(t))},ToLength:function(e){var t=z.ToInteger(e);if(t<=0){return 0}if(t>Number.MAX_SAFE_INTEGER){return Number.MAX_SAFE_INTEGER}return t},SameValue:function(e,t){if(e===t){if(e===0){return 1/e===1/t}return true}return _(e)&&_(t)},SameValueZero:function(e,t){return e===t||_(e)&&_(t)},IsIterable:function(e){return z.TypeIsObject(e)&&(typeof e[A]!=="undefined"||R(e))},GetIterator:function(e){if(R(e)){return new T(e,"value")}var t=e[A];if(!z.IsCallable(t)){throw new TypeError("value is not an iterable")}var r=t.call(e);if(!z.TypeIsObject(r)){throw new TypeError("bad iterator")}return r},IteratorNext:function(e){var t=arguments.length>1?e.next(arguments[1]):e.next();if(!z.TypeIsObject(t)){throw new TypeError("bad iterator")}return t},Construct:function(e,t){var r;if(z.IsCallable(e[E])){r=e[E]()}else{r=p(e.prototype||null)}l(r,{_es6construct:true});var n=z.Call(e,r,t);return z.TypeIsObject(n)?n:r},CreateHTML:function(e,t,r,n){var o=String(e);var i="<"+t;if(r!==""){var a=String(n);var u=a.replace(/"/g,"&quot;");i+=" "+r+'="'+u+'"'}var s=i+">";var f=s+o;return f+"</"+t+">"}};var F=function(e){if(!z.TypeIsObject(e)){throw new TypeError("bad object")}var t=e;if(!t._es6construct){if(t.constructor&&z.IsCallable(t.constructor[E])){t=t.constructor[E](t)}l(t,{_es6construct:true})}return t};if(String.fromCodePoint&&String.fromCodePoint.length!==1){var D=Function.apply.bind(String.fromCodePoint);C(String,"fromCodePoint",function rr(e){return D(this,arguments)})}var q={fromCodePoint:function nr(e){var t=[];var r;for(var n=0,o=arguments.length;n<o;n++){r=Number(arguments[n]);if(!z.SameValue(r,z.ToInteger(r))||r<0||r>1114111){throw new RangeError("Invalid code point "+r)}if(r<65536){t.push(String.fromCharCode(r))}else{r-=65536;t.push(String.fromCharCode((r>>10)+55296));t.push(String.fromCharCode(r%1024+56320))}}return t.join("")},raw:function or(e){var t=z.ToObject(e,"bad callSite");var r=z.ToObject(t.raw,"bad raw value");var n=r.length;var o=z.ToLength(n);if(o<=0){return""}var i=[];var a=0;var u,s,f,c;while(a<o){u=String(a);f=String(r[u]);i.push(f);if(a+1>=o){break}s=a+1<arguments.length?arguments[a+1]:"";c=String(s);i.push(c);a++}return i.join("")}};l(String,q);if(String.raw({raw:{0:"x",1:"y",length:2}})!=="xy"){C(String,"raw",q.raw)}var G=function ir(e,t){if(t<1){return""}if(t%2){return ir(e,t-1)+e}var r=ir(e,t/2);return r+r};var H=Infinity;var W={repeat:function ar(e){z.RequireObjectCoercible(this);var t=String(this);var r=z.ToInteger(e);if(r<0||r>=H){throw new RangeError("repeat count must be less than infinity and not overflow maximum string size")}return G(t,r)},startsWith:function ur(e){z.RequireObjectCoercible(this);var t=String(this);if(x.regex(e)){throw new TypeError('Cannot call method "startsWith" with a regex')}var r=String(e);var n=arguments.length>1?arguments[1]:void 0;var o=Math.max(z.ToInteger(n),0);return t.slice(o,o+r.length)===r},endsWith:function sr(e){z.RequireObjectCoercible(this);var t=String(this);if(x.regex(e)){throw new TypeError('Cannot call method "endsWith" with a regex')}var r=String(e);var n=t.length;var o=arguments.length>1?arguments[1]:void 0;var i=typeof o==="undefined"?n:z.ToInteger(o);var a=Math.min(Math.max(i,0),n);return t.slice(a-r.length,a)===r},includes:function fr(e){var t=arguments.length>1?arguments[1]:void 0;return w(this,e,t)!==-1},codePointAt:function cr(e){z.RequireObjectCoercible(this);var t=String(this);var r=z.ToInteger(e);var n=t.length;if(r>=0&&r<n){var o=t.charCodeAt(r);var i=r+1===n;if(o<55296||o>56319||i){return o}var a=t.charCodeAt(r+1);if(a<56320||a>57343){return o}return(o-55296)*1024+(a-56320)+65536}}};l(String.prototype,W);if("a".includes("a",Infinity)!==false){C(String.prototype,"includes",W.includes)}var V="\x85".trim().length!==1;if(V){delete String.prototype.trim;var $=["	\n\f\r \xa0\u1680\u180e\u2000\u2001\u2002\u2003","\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028","\u2029\ufeff"].join("");var U=new RegExp("(^["+$+"]+)|(["+$+"]+$)","g");l(String.prototype,{trim:function lr(){if(typeof this==="undefined"||this===null){throw new TypeError("can't convert "+this+" to object")}return String(this).replace(U,"")}})}var X=function(e){z.RequireObjectCoercible(e);this._s=String(e);this._i=0};X.prototype.next=function(){var e=this._s,t=this._i;if(typeof e==="undefined"||t>=e.length){this._s=void 0;return{value:void 0,done:true}}var r=e.charCodeAt(t),n,o;if(r<55296||r>56319||t+1===e.length){o=1}else{n=e.charCodeAt(t+1);o=n<56320||n>57343?1:2}this._i=t+o;return{value:e.substr(t,o),done:false}};k(X.prototype);k(String.prototype,function(){return new X(this)});if(!O){C(String.prototype,"startsWith",W.startsWith);C(String.prototype,"endsWith",W.endsWith)}var Z={from:function pr(e){var t=arguments.length>1?arguments[1]:void 0;var r=z.ToObject(e,"bad iterable");if(typeof t!=="undefined"&&!z.IsCallable(t)){throw new TypeError("Array.from: when provided, the second argument must be a function")}var n=arguments.length>2;var o=n?arguments[2]:void 0;var i=z.IsIterable(r);var a;var u,s,f;if(i){s=0;u=z.IsCallable(this)?Object(new this):[];var c=i?z.GetIterator(r):null;var l;do{l=z.IteratorNext(c);if(!l.done){f=l.value;if(t){u[s]=n?t.call(o,f,s):t(f,s)}else{u[s]=f}s+=1}}while(!l.done);a=s}else{a=z.ToLength(r.length);u=z.IsCallable(this)?Object(new this(a)):new Array(a);for(s=0;s<a;++s){f=r[s];if(t){u[s]=n?t.call(o,f,s):t(f,s)}else{u[s]=f}}}u.length=a;return u},of:function vr(){return Array.from.call(this,arguments)}};l(Array,Z);var K=function(e){return{value:e,done:arguments.length===0}};T=function(e,t){this.i=0;this.array=e;this.kind=t};l(T.prototype,{next:function(){var e=this.i,t=this.array;if(!(this instanceof T)){throw new TypeError("Not an ArrayIterator")}if(typeof t!=="undefined"){var r=z.ToLength(t.length);for(;e<r;e++){var n=this.kind;var o;if(n==="key"){o=e}else if(n==="value"){o=t[e]}else if(n==="entry"){o=[e,t[e]]}this.i=e+1;return{value:o,done:false}}}this.array=void 0;return{value:void 0,done:true}}});k(T.prototype);var B=function(e,t){this.object=e;this.array=null;this.kind=t};function J(e){var t=[];for(var r in e){t.push(r)}return t}l(B.prototype,{next:function(){var e,t=this.array;if(!(this instanceof B)){throw new TypeError("Not an ObjectIterator")}if(t===null){t=this.array=J(this.object)}while(z.ToLength(t.length)>0){e=t.shift();if(!(e in this.object)){continue}if(this.kind==="key"){return K(e)}else if(this.kind==="value"){return K(this.object[e])}else{return K([e,this.object[e]])}}return K()}});k(B.prototype);var Q=function(){var e=function r(e){this.length=e};e.prototype=[];var t=Array.of.apply(e,[1,2]);return t instanceof e&&t.length===2}();if(!Q){C(Array,"of",Z.of)}var Y={copyWithin:function hr(e,t){var r=arguments[2];var n=z.ToObject(this);var o=z.ToLength(n.length);var i=z.ToInteger(e);var a=z.ToInteger(t);var u=i<0?Math.max(o+i,0):Math.min(i,o);var s=a<0?Math.max(o+a,0):Math.min(a,o);r=typeof r==="undefined"?o:z.ToInteger(r);var f=r<0?Math.max(o+r,0):Math.min(r,o);var c=Math.min(f-s,o-u);var l=1;if(s<u&&u<s+c){l=-1;s+=c-1;u+=c-1}while(c>0){if(M(n,s)){n[u]=n[s]}else{delete n[s]}s+=l;u+=l;c-=1}return n},fill:function yr(e){var t=arguments.length>1?arguments[1]:void 0;var r=arguments.length>2?arguments[2]:void 0;var n=z.ToObject(this);var o=z.ToLength(n.length);t=z.ToInteger(typeof t==="undefined"?0:t);r=z.ToInteger(typeof r==="undefined"?o:r);var i=t<0?Math.max(o+t,0):Math.min(t,o);var a=r<0?o+r:r;for(var u=i;u<o&&u<a;++u){n[u]=e}return n},find:function br(e){var t=z.ToObject(this);var r=z.ToLength(t.length);if(!z.IsCallable(e)){throw new TypeError("Array#find: predicate must be a function")}var n=arguments.length>1?arguments[1]:null;for(var o=0,i;o<r;o++){i=t[o];if(n){if(e.call(n,i,o,t)){return i}}else if(e(i,o,t)){return i}}},findIndex:function gr(e){var t=z.ToObject(this);var r=z.ToLength(t.length);if(!z.IsCallable(e)){throw new TypeError("Array#findIndex: predicate must be a function")}var n=arguments.length>1?arguments[1]:null;for(var o=0;o<r;o++){if(n){if(e.call(n,t[o],o,t)){return o}}else if(e(t[o],o,t)){return o}}return-1},keys:function dr(){return new T(this,"key")},values:function mr(){return new T(this,"value")},entries:function Or(){return new T(this,"entry")}};if(Array.prototype.keys&&!z.IsCallable([1].keys().next)){delete Array.prototype.keys}if(Array.prototype.entries&&!z.IsCallable([1].entries().next)){delete Array.prototype.entries}if(Array.prototype.keys&&Array.prototype.entries&&!Array.prototype.values&&Array.prototype[A]){l(Array.prototype,{values:Array.prototype[A]});if(x.symbol(S.unscopables)){Array.prototype[S.unscopables].values=true}}if(Array.prototype.values&&Array.prototype.values.name!=="values"){var ee=Array.prototype.values;C(Array.prototype,"values",function wr(){return ee.call(this)});c(Array.prototype,A,Array.prototype.values,true)}l(Array.prototype,Y);k(Array.prototype,function(){return this.values()});if(Object.getPrototypeOf){k(Object.getPrototypeOf([].values()))}var te=function(){return r(function(){return Array.from({length:-1}).length===0})}();var re=function(){var e=Array.from([0].entries());return e.length===1&&e[0][0]===0&&e[0][1]===1}();if(!te||!re){C(Array,"from",Z.from)}var ne=function(e,t){var n={length:-1};n[t?(-1>>>0)-1:0]=true;return r(function(){e.call(n,function(){throw new RangeError("should not reach here")},[])})};if(!ne(Array.prototype.forEach)){var oe=Array.prototype.forEach;C(Array.prototype,"forEach",function jr(e){return oe.apply(this.length>=0?this:[],arguments)},true)}if(!ne(Array.prototype.map)){var ie=Array.prototype.map;C(Array.prototype,"map",function Mr(e){return ie.apply(this.length>=0?this:[],arguments)},true)}if(!ne(Array.prototype.filter)){var ae=Array.prototype.filter;C(Array.prototype,"filter",function Tr(e){return ae.apply(this.length>=0?this:[],arguments)},true)}if(!ne(Array.prototype.some)){var ue=Array.prototype.some;C(Array.prototype,"some",function Ir(e){return ue.apply(this.length>=0?this:[],arguments)},true)}if(!ne(Array.prototype.every)){var se=Array.prototype.every;C(Array.prototype,"every",function Sr(e){return se.apply(this.length>=0?this:[],arguments)},true)}if(!ne(Array.prototype.reduce)){var fe=Array.prototype.reduce;C(Array.prototype,"reduce",function Er(e){return fe.apply(this.length>=0?this:[],arguments)},true)}if(!ne(Array.prototype.reduceRight,true)){var ce=Array.prototype.reduceRight;C(Array.prototype,"reduceRight",function xr(e){return ce.apply(this.length>=0?this:[],arguments)},true)}var le=Math.pow(2,53)-1;l(Number,{MAX_SAFE_INTEGER:le,MIN_SAFE_INTEGER:-le,EPSILON:2.220446049250313e-16,parseInt:g.parseInt,parseFloat:g.parseFloat,isFinite:P,isInteger:function _r(e){return P(e)&&z.ToInteger(e)===e},isSafeInteger:function Pr(e){return Number.isInteger(e)&&Math.abs(e)<=Number.MAX_SAFE_INTEGER},isNaN:_});c(Number,"parseInt",g.parseInt,Number.parseInt!==g.parseInt);if(![,1].find(function(e,t){return t===0})){C(Array.prototype,"find",Y.find)}if([,1].findIndex(function(e,t){return t===0})!==0){C(Array.prototype,"findIndex",Y.findIndex)}var pe=Function.bind.call(Function.bind,Object.prototype.propertyIsEnumerable);var ve=function Nr(){var e=Number(this);var t=arguments.length;var r=t-e;var n=new Array(r<0?0:r);for(var o=e;o<t;++o){n[o-e]=arguments[o]}return n};var he=function Cr(e){return function t(r,n){r[n]=e[n];return r}};var ye=function(e,t){var r=Object.keys(Object(t));var n;if(z.IsCallable(Object.getOwnPropertySymbols)){n=f(Object.getOwnPropertySymbols(Object(t)),pe(t))}return s(r.concat(n||[]),he(t),e)};var be={assign:function(e,t){if(!z.TypeIsObject(e)){throw new TypeError("target must be an object")}return s(ve.apply(0,arguments),ye)},is:function Ar(e,t){return z.SameValue(e,t)}};var ge=Object.assign&&Object.preventExtensions&&function(){var e=Object.preventExtensions({1:2});try{Object.assign(e,"xy")}catch(t){return e[1]==="y"}}();if(ge){C(Object,"assign",be.assign)}l(Object,be);if(i){var de={setPrototypeOf:function(e,t){var r;var n=function(e,t){if(!z.TypeIsObject(e)){throw new TypeError("cannot set prototype on a non-object")}if(!(t===null||z.TypeIsObject(t))){throw new TypeError("can only set prototype to an object or null"+t)}};var o=function(e,t){n(e,t);r.call(e,t);return e};try{r=e.getOwnPropertyDescriptor(e.prototype,t).set;r.call({},null)}catch(i){if(e.prototype!=={}[t]){return}r=function(e){this[t]=e};o.polyfill=o(o({},null),e.prototype)instanceof e}return o}(Object,"__proto__")};l(Object,de)}if(Object.setPrototypeOf&&Object.getPrototypeOf&&Object.getPrototypeOf(Object.setPrototypeOf({},null))!==null&&Object.getPrototypeOf(Object.create(null))===null){(function(){var e=Object.create(null);var t=Object.getPrototypeOf,r=Object.setPrototypeOf;Object.getPrototypeOf=function(r){var n=t(r);return n===e?null:n};Object.setPrototypeOf=function(t,n){var o=n===null?e:n;return r(t,o)};Object.setPrototypeOf.polyfill=false})()}var me=!t(function(){Object.keys("foo")});if(!me){var Oe=Object.keys;C(Object,"keys",function kr(e){return Oe(z.ToObject(e))})}if(Object.getOwnPropertyNames){var we=!t(function(){Object.getOwnPropertyNames("foo")});if(!we){var je=Object.getOwnPropertyNames;C(Object,"getOwnPropertyNames",function Rr(e){return je(z.ToObject(e))})}}if(Object.getOwnPropertyDescriptor){var Me=!t(function(){Object.getOwnPropertyDescriptor("foo","bar")});if(!Me){var Te=Object.getOwnPropertyDescriptor;C(Object,"getOwnPropertyDescriptor",function Lr(e,t){return Te(z.ToObject(e),t)})}}if(Object.seal){var Ie=!t(function(){Object.seal("foo")});if(!Ie){var Se=Object.seal;C(Object,"seal",function zr(e){if(!x.object(e)){return e}return Se(e)})}}if(Object.isSealed){var Ee=!t(function(){Object.isSealed("foo")});if(!Ee){var xe=Object.isSealed;C(Object,"isSealed",function Fr(e){if(!x.object(e)){return true}return xe(e)})}}if(Object.freeze){var _e=!t(function(){Object.freeze("foo")});if(!_e){var Pe=Object.freeze;C(Object,"freeze",function Dr(e){if(!x.object(e)){return e}return Pe(e)})}}if(Object.isFrozen){var Ne=!t(function(){Object.isFrozen("foo")});if(!Ne){var Ce=Object.isFrozen;C(Object,"isFrozen",function qr(e){if(!x.object(e)){return true}return Ce(e)})}}if(Object.preventExtensions){var Ae=!t(function(){Object.preventExtensions("foo")});if(!Ae){var ke=Object.preventExtensions;C(Object,"preventExtensions",function Gr(e){if(!x.object(e)){return e}return ke(e)})}}if(Object.isExtensible){var Re=!t(function(){Object.isExtensible("foo")});if(!Re){var Le=Object.isExtensible;C(Object,"isExtensible",function Hr(e){if(!x.object(e)){return false}return Le(e)})}}if(Object.getPrototypeOf){var ze=!t(function(){Object.getPrototypeOf("foo")});if(!ze){var Fe=Object.getPrototypeOf;C(Object,"getPrototypeOf",function Wr(e){return Fe(z.ToObject(e))})}}if(!RegExp.prototype.flags&&i){var De=function Vr(){if(!z.TypeIsObject(this)){throw new TypeError("Method called on incompatible type: must be an object.")}var e="";if(this.global){e+="g"}if(this.ignoreCase){e+="i"}if(this.multiline){e+="m"}if(this.unicode){e+="u"}if(this.sticky){e+="y"}return e};N.getter(RegExp.prototype,"flags",De)}var qe=r(function(){return String(new RegExp(/a/g,"i"))==="/a/i"});if(!qe&&i){var Ge=RegExp;var He=function $r(e,t){var r=this instanceof $r;if(!r&&(x.regex(e)||e.constructor===$r)){return e}if(x.regex(e)&&x.string(t)){return new $r(e.source,t)}return new Ge(e,t)};N.preserveToString(He,Ge);if(Object.setPrototypeOf){Object.setPrototypeOf(Ge,He)}a(Object.getOwnPropertyNames(Ge),function(e){if(e==="$input"){return}if(e in I){return}N.proxy(Ge,e,He)});He.prototype=Ge.prototype;N.redefine(Ge.prototype,"constructor",He);RegExp=He;N.redefine(g,"RegExp",He)}if(i){var We={input:"$_",lastMatch:"$&",lastParen:"$+",leftContext:"$`",rightContext:"$'"};a(Object.keys(We),function(e){if(e in RegExp&&!(We[e]in RegExp)){N.getter(RegExp,We[e],function t(){return RegExp[e]})}})}var Ve=function(e){return e*e};var $e=function(e,t){return e+t};var Ue=1/Number.EPSILON;var Xe=function Ur(e){return e+Ue-Ue};var Ze=Math.pow(2,-23);var Ke=Math.pow(2,127)*(2-Ze);var Be=Math.pow(2,-126);var Je=Number.prototype.clz;delete Number.prototype.clz;var Qe={acosh:function Xr(e){var t=Number(e);if(Number.isNaN(t)||e<1){return NaN}if(t===1){return 0}if(t===Infinity){return t}return Math.log(t/Math.E+Math.sqrt(t+1)*Math.sqrt(t-1)/Math.E)+1},asinh:function Zr(e){var t=Number(e);if(t===0||!d(t)){return t}return t<0?-Math.asinh(-t):Math.log(t+Math.sqrt(t*t+1))},atanh:function Kr(e){var t=Number(e);if(Number.isNaN(t)||t<-1||t>1){return NaN}if(t===-1){return-Infinity}if(t===1){return Infinity}if(t===0){return t}return.5*Math.log((1+t)/(1-t))},cbrt:function Br(e){var t=Number(e);if(t===0){return t}var r=t<0,n;if(r){t=-t}if(t===Infinity){n=Infinity}else{n=Math.exp(Math.log(t)/3);n=(t/(n*n)+2*n)/3}return r?-n:n},clz32:function Jr(e){var t=Number(e);var r=z.ToUint32(t);if(r===0){return 32}return Je?Je.call(r):31-Math.floor(Math.log(r+.5)*Math.LOG2E)},cosh:function Qr(e){var t=Number(e);if(t===0){return 1}if(Number.isNaN(t)){return NaN}if(!d(t)){return Infinity}if(t<0){t=-t}if(t>21){return Math.exp(t)/2}return(Math.exp(t)+Math.exp(-t))/2},expm1:function Yr(e){var t=Number(e);if(t===-Infinity){return-1}if(!d(t)||t===0){return t}if(Math.abs(t)>.5){return Math.exp(t)-1}var r=t;var n=0;var o=1;while(n+r!==n){n+=r;o+=1;r*=t/o}return n},hypot:function en(e,t){var r=false;var n=true;var o=false;var i=[];Array.prototype.every.call(arguments,function(e){var t=Number(e);if(Number.isNaN(t)){r=true}else if(t===Infinity||t===-Infinity){o=true}else if(t!==0){n=false}if(o){return false}else if(!r){i.push(Math.abs(t))}return true});if(o){return Infinity}if(r){return NaN}if(n){return 0}var a=Math.max.apply(Math,i);var f=u(i,function(e){return e/a});var c=s(u(f,Ve),$e);return a*Math.sqrt(c)},log2:function tn(e){return Math.log(e)*Math.LOG2E},log10:function rn(e){return Math.log(e)*Math.LOG10E},log1p:function nn(e){var t=Number(e);if(t<-1||Number.isNaN(t)){return NaN}if(t===0||t===Infinity){return t}if(t===-1){return-Infinity}return 1+t-1===0?t:t*(Math.log(1+t)/(1+t-1))},sign:function on(e){var t=Number(e);if(t===0){return t}if(Number.isNaN(t)){return t}return t<0?-1:1},sinh:function an(e){var t=Number(e);if(!d(t)||t===0){return t}if(Math.abs(t)<1){return(Math.expm1(t)-Math.expm1(-t))/2}return(Math.exp(t-1)-Math.exp(-t-1))*Math.E/2},tanh:function un(e){var t=Number(e);if(Number.isNaN(t)||t===0){return t}if(t===Infinity){return 1}if(t===-Infinity){return-1}var r=Math.expm1(t);var n=Math.expm1(-t);if(r===Infinity){return 1}if(n===Infinity){return-1}return(r-n)/(Math.exp(t)+Math.exp(-t))},trunc:function sn(e){var t=Number(e);return t<0?-Math.floor(-t):Math.floor(t)},imul:function fn(e,t){var r=z.ToUint32(e);var n=z.ToUint32(t);var o=r>>>16&65535;var i=r&65535;var a=n>>>16&65535;var u=n&65535;return i*u+(o*u+i*a<<16>>>0)|0},fround:function cn(e){var t=Number(e);if(t===0||t===Infinity||t===-Infinity||_(t)){return t}var r=Math.sign(t);var n=Math.abs(t);if(n<Be){return r*Xe(n/Be/Ze)*Be*Ze}var o=(1+Ze/Number.EPSILON)*n;var i=o-(o-n);if(i>Ke||_(i)){return r*Infinity}return r*i}};l(Math,Qe);c(Math,"log1p",Qe.log1p,Math.log1p(-1e-17)!==-1e-17);c(Math,"asinh",Qe.asinh,Math.asinh(-1e7)!==-Math.asinh(1e7));c(Math,"tanh",Qe.tanh,Math.tanh(-2e-17)!==-2e-17);c(Math,"acosh",Qe.acosh,Math.acosh(Number.MAX_VALUE)===Infinity);c(Math,"cbrt",Qe.cbrt,Math.abs(1-Math.cbrt(1e-300)/1e-100)/Number.EPSILON>8);c(Math,"sinh",Qe.sinh,Math.sinh(-2e-17)!==-2e-17);var Ye=Math.expm1(10);c(Math,"expm1",Qe.expm1,Ye>22025.465794806718||Ye<22025.465794806718);var et=Math.round;var tt=Math.round(.5-Number.EPSILON/4)===0&&Math.round(-.5+Number.EPSILON/3.99)===1;var rt=Ue+1;var nt=2*Ue-1;var ot=[rt,nt].every(function(e){return Math.round(e)===e});c(Math,"round",function ln(e){var t=Math.floor(e);var r=t===-1?-0:t+1;return e-t<.5?t:r},!tt||!ot);N.preserveToString(Math.round,et);var it=Math.imul;if(Math.imul(4294967295,5)!==-5){Math.imul=Qe.imul;N.preserveToString(Math.imul,it)}if(Math.imul.length!==2){C(Math,"imul",function pn(e,t){return it.apply(Math,arguments)})}var at=function(){var e,t;z.IsPromise=function(e){if(!z.TypeIsObject(e)){return false}if(!e._promiseConstructor){return false}if(typeof e._status==="undefined"){return false}return true};var r=function(e){if(!z.IsCallable(e)){throw new TypeError("bad promise constructor")}var t=this;var r=function(e,r){t.resolve=e;t.reject=r};t.promise=z.Construct(e,[r]);if(!t.promise._es6construct){throw new TypeError("bad promise constructor")}if(!(z.IsCallable(t.resolve)&&z.IsCallable(t.reject))){throw new TypeError("bad promise constructor")}};var n=g.setTimeout;var o;if(typeof window!=="undefined"&&z.IsCallable(window.postMessage)){o=function(){var e=[];var t="zero-timeout-message";var r=function(r){e.push(r);window.postMessage(t,"*")};var n=function(r){if(r.source===window&&r.data===t){r.stopPropagation();if(e.length===0){return}var n=e.shift();n()}};window.addEventListener("message",n,true);return r}}var i=function(){var e=g.Promise;return e&&e.resolve&&function(t){return e.resolve().then(t)}};var u=z.IsCallable(g.setImmediate)?g.setImmediate.bind(g):typeof process==="object"&&process.nextTick?process.nextTick:i()||(z.IsCallable(o)?o():function(e){n(e,0)});var s=function(e,t){if(!z.TypeIsObject(e)){return false}var r=t.resolve;var n=t.reject;try{var o=e.then;if(!z.IsCallable(o)){return false}o.call(e,r,n)}catch(i){n(i)}return true};var f=function(e,t){a(e,function(e){u(function(){var r=e.handler;var n=e.capability;var o=n.resolve;var i=n.reject;try{var a=r(t);if(a===n.promise){throw new TypeError("self resolution")}var u=s(a,n);if(!u){o(a)}}catch(f){i(f)}})})};var v=function(e,t,n){return function(o){if(o===e){return n(new TypeError("self resolution"))}var i=e._promiseConstructor;var a=new r(i);var u=s(o,a);if(u){return a.promise.then(t,n)}else{return t(o)}}};e=function(e){var t=this;t=F(t);if(!t._promiseConstructor){throw new TypeError("bad promise")}if(typeof t._status!=="undefined"){throw new TypeError("promise already initialized")}if(!z.IsCallable(e)){throw new TypeError("not a valid resolver")}t._status="unresolved";t._resolveReactions=[];t._rejectReactions=[];var r=function(e){if(t._status!=="unresolved"){return}var r=t._resolveReactions;t._result=e;t._resolveReactions=void 0;t._rejectReactions=void 0;t._status="has-resolution";f(r,e)};var n=function(e){if(t._status!=="unresolved"){return}var r=t._rejectReactions;t._result=e;t._resolveReactions=void 0;t._rejectReactions=void 0;t._status="has-rejection";f(r,e)};try{e(r,n)}catch(o){n(o)}return t};t=e.prototype;var h=function(e,t,r,n){var o=false;return function(i){if(o){return}o=true;t[e]=i;if(--n.count===0){var a=r.resolve;a(t)}}};c(e,E,function(e){var r=this;var n=r.prototype||t;var o=e||p(n);l(o,{_status:void 0,_result:void 0,_resolveReactions:void 0,_rejectReactions:void 0,_promiseConstructor:void 0});o._promiseConstructor=r;return o});l(e,{all:function d(e){var t=this;var n=new r(t);var o=n.resolve;var i=n.reject;try{if(!z.IsIterable(e)){throw new TypeError("bad iterable")}var a=z.GetIterator(e);var u=[],s={count:1};for(var f=0;;f++){var c=z.IteratorNext(a);if(c.done){break}var l=t.resolve(c.value);var p=h(f,u,n,s);s.count++;l.then(p,n.reject)}if(--s.count===0){o(u)}}catch(v){i(v)}return n.promise},race:function m(e){var t=this;var n=new r(t);var o=n.resolve;var i=n.reject;try{if(!z.IsIterable(e)){throw new TypeError("bad iterable")}var a=z.GetIterator(e);while(true){var u=z.IteratorNext(a);if(u.done){break}var s=t.resolve(u.value);s.then(o,i)}}catch(f){i(f)}return n.promise},reject:function O(e){var t=this;var n=new r(t);var o=n.reject;o(e);return n.promise},resolve:function w(e){var t=this;if(z.IsPromise(e)){var n=e._promiseConstructor;if(n===t){return e}}var o=new r(t);var i=o.resolve;i(e);return o.promise}});var y=function(e){return e};var b=function(e){throw e};l(t,{"catch":function(e){return this.then(void 0,e)},then:function j(e,t){var n=this;if(!z.IsPromise(n)){throw new TypeError("not a promise")}var o=this.constructor;var i=new r(o);if(!z.IsCallable(t)){t=b}if(!z.IsCallable(e)){e=y}var a=v(n,e,t);var u={capability:i,handler:a};var s={capability:i,handler:t};switch(n._status){case"unresolved":n._resolveReactions.push(u);n._rejectReactions.push(s);break;case"has-resolution":f([u],n._result);break;case"has-rejection":f([s],n._result);break;default:throw new TypeError("unexpected")}return i.promise}});return e}();if(g.Promise){delete g.Promise.accept;delete g.Promise.defer;delete g.Promise.prototype.chain}l(g,{Promise:at});var ut=v(g.Promise,function(e){return e.resolve(42)instanceof e});var st=!t(function(){g.Promise.reject(42).then(null,5).then(null,I)});var ft=t(function(){g.Promise.call(3,I)});if(!ut||!st||!ft){Promise=at;C(g,"Promise",at)}var ct=function(e){var t=Object.keys(s(e,function(e,t){e[t]=true;return e},{}));return e.join(":")===t.join(":")};var lt=ct(["z","a","bb"]);var pt=ct(["z",1,"a","3",2]);if(i){var vt=function vn(e){if(!lt){return null}var t=typeof e;if(t==="string"){return"$"+e}else if(t==="number"){if(!pt){return"n"+e}return e}return null};var ht=function hn(){return Object.create?Object.create(null):{}};var yt={Map:function(){var e={};function t(e,t){this.key=e;this.value=t;this.next=null;this.prev=null}t.prototype.isRemoved=function(){return this.key===e};var r=function u(e){return!!e._es6map};var n=function s(e,t){if(!z.TypeIsObject(e)||!r(e)){throw new TypeError("Method Map.prototype."+t+" called on incompatible receiver "+String(e))}};function o(e,t){n(e,"[[MapIterator]]");this.head=e._head;this.i=this.head;this.kind=t}o.prototype={next:function(){var e=this.i,t=this.kind,r=this.head,n;if(typeof this.i==="undefined"){return{value:void 0,done:true}}while(e.isRemoved()&&e!==r){e=e.prev}while(e.next!==r){e=e.next;if(!e.isRemoved()){if(t==="key"){n=e.key}else if(t==="value"){n=e.value}else{n=[e.key,e.value]}this.i=e;return{value:n,done:false}}}this.i=void 0;return{value:void 0,done:true}}};k(o.prototype);function i(){var e=this;if(!z.TypeIsObject(e)){throw new TypeError("Constructor Map requires 'new'")}e=F(e);if(!e._es6map){throw new TypeError("bad map")}var r=new t(null,null);r.next=r.prev=r;l(e,{_head:r,_storage:ht(),_size:0});if(arguments.length>0&&typeof arguments[0]!=="undefined"&&arguments[0]!==null){var n=z.GetIterator(arguments[0]);var o=e.set;if(!z.IsCallable(o)){throw new TypeError("bad map")}while(true){var i=z.IteratorNext(n);if(i.done){break}var a=i.value;if(!z.TypeIsObject(a)){throw new TypeError("expected iterable of pairs")}o.call(e,a[0],a[1])}}return e}var a=i.prototype;c(i,E,function(e){var t=this;var r=t.prototype||a;var n=e||p(r);l(n,{_es6map:true});return n});N.getter(i.prototype,"size",function(){if(typeof this._size==="undefined"){throw new TypeError("size method called on incompatible Map")}return this._size});l(i.prototype,{get:function(e){n(this,"get");var t=vt(e);if(t!==null){var r=this._storage[t];if(r){return r.value}else{return}}var o=this._head,i=o;while((i=i.next)!==o){if(z.SameValueZero(i.key,e)){return i.value}}},has:function(e){n(this,"has");var t=vt(e);if(t!==null){return typeof this._storage[t]!=="undefined"}var r=this._head,o=r;while((o=o.next)!==r){if(z.SameValueZero(o.key,e)){return true}}return false},set:function(e,r){n(this,"set");var o=this._head,i=o,a;var u=vt(e);if(u!==null){if(typeof this._storage[u]!=="undefined"){this._storage[u].value=r;return this}else{a=this._storage[u]=new t(e,r);i=o.prev}}while((i=i.next)!==o){if(z.SameValueZero(i.key,e)){i.value=r;return this}}a=a||new t(e,r);if(z.SameValue(-0,e)){a.key=+0}a.next=this._head;a.prev=this._head.prev;a.prev.next=a;a.next.prev=a;this._size+=1;return this},"delete":function(t){n(this,"delete");var r=this._head,o=r;var i=vt(t);if(i!==null){if(typeof this._storage[i]==="undefined"){return false}o=this._storage[i].prev;delete this._storage[i]}while((o=o.next)!==r){if(z.SameValueZero(o.key,t)){o.key=o.value=e;o.prev.next=o.next;o.next.prev=o.prev;this._size-=1;

return true}}return false},clear:function f(){n(this,"clear");this._size=0;this._storage=ht();var t=this._head,r=t,o=r.next;while((r=o)!==t){r.key=r.value=e;o=r.next;r.next=r.prev=t}t.next=t.prev=t},keys:function v(){n(this,"keys");return new o(this,"key")},values:function h(){n(this,"values");return new o(this,"value")},entries:function y(){n(this,"entries");return new o(this,"key+value")},forEach:function b(e){n(this,"forEach");var t=arguments.length>1?arguments[1]:null;var r=this.entries();for(var o=r.next();!o.done;o=r.next()){if(t){e.call(t,o.value[1],o.value[0],this)}else{e(o.value[1],o.value[0],this)}}}});k(i.prototype,function(){return this.entries()});return i}(),Set:function(){var e=function i(e){return e._es6set&&typeof e._storage!=="undefined"};var t=function u(t,r){if(!z.TypeIsObject(t)||!e(t)){throw new TypeError("Set.prototype."+r+" called on incompatible receiver "+String(t))}};var r=function s(){var e=this;if(!z.TypeIsObject(e)){throw new TypeError("Constructor Set requires 'new'")}e=F(e);if(!e._es6set){throw new TypeError("bad set")}l(e,{"[[SetData]]":null,_storage:ht()});if(arguments.length>0&&typeof arguments[0]!=="undefined"&&arguments[0]!==null){var t=arguments[0];var r=z.GetIterator(t);var n=e.add;if(!z.IsCallable(n)){throw new TypeError("bad set")}while(true){var o=z.IteratorNext(r);if(o.done){break}var i=o.value;n.call(e,i)}}return e};var n=r.prototype;c(r,E,function(e){var t=this;var r=t.prototype||n;var o=e||p(r);l(o,{_es6set:true});return o});var o=function f(e){if(!e["[[SetData]]"]){var t=e["[[SetData]]"]=new yt.Map;a(Object.keys(e._storage),function(e){if(e.charCodeAt(0)===36){e=e.slice(1)}else if(e.charAt(0)==="n"){e=+e.slice(1)}else{e=+e}t.set(e,e)});e._storage=null}};N.getter(r.prototype,"size",function(){t(this,"size");o(this);return this["[[SetData]]"].size});l(r.prototype,{has:function(e){t(this,"has");var r;if(this._storage&&(r=vt(e))!==null){return!!this._storage[r]}o(this);return this["[[SetData]]"].has(e)},add:function(e){t(this,"add");var r;if(this._storage&&(r=vt(e))!==null){this._storage[r]=true;return this}o(this);this["[[SetData]]"].set(e,e);return this},"delete":function(e){t(this,"delete");var r;if(this._storage&&(r=vt(e))!==null){var n=M(this._storage,r);return delete this._storage[r]&&n}o(this);return this["[[SetData]]"]["delete"](e)},clear:function v(){t(this,"clear");if(this._storage){this._storage=ht()}else{this["[[SetData]]"].clear()}},values:function h(){t(this,"values");o(this);return this["[[SetData]]"].values()},entries:function y(){t(this,"entries");o(this);return this["[[SetData]]"].entries()},forEach:function b(e){t(this,"forEach");var r=arguments.length>1?arguments[1]:null;var n=this;o(n);this["[[SetData]]"].forEach(function(t,o){if(r){e.call(r,o,o,n)}else{e(o,o,n)}})}});c(r,"keys",r.values,true);k(r.prototype,function(){return this.values()});return r}()};l(g,yt);if(g.Map||g.Set){var bt=r(function(){return new Map([[1,2]]).get(1)===2});if(!bt){var gt=g.Map;g.Map=function yn(){if(!(this instanceof yn)){throw new TypeError('Constructor Map requires "new"')}var e=new gt;var t;if(arguments.length>0){t=arguments[0]}if(Array.isArray(t)||x.string(t)){a(t,function(t){e.set(t[0],t[1])})}else if(t instanceof yn){yn.prototype.forEach.call(t,function(t,r){e.set(r,t)})}Object.setPrototypeOf(e,g.Map.prototype);c(e,"constructor",yn,true);return e};g.Map.prototype=p(gt.prototype);N.preserveToString(g.Map,gt)}var dt=new Map;var mt=function(e){e["delete"](0);e["delete"](-0);e.set(0,3);e.get(-0,4);return e.get(0)===3&&e.get(-0)===4}(dt);var Ot=dt.set(1,2)===dt;if(!mt||!Ot){var wt=Map.prototype.set;C(Map.prototype,"set",function bn(e,t){wt.call(this,e===0?0:e,t);return this})}if(!mt){var jt=Map.prototype.get;var Mt=Map.prototype.has;l(Map.prototype,{get:function gn(e){return jt.call(this,e===0?0:e)},has:function dn(e){return Mt.call(this,e===0?0:e)}},true);N.preserveToString(Map.prototype.get,jt);N.preserveToString(Map.prototype.has,Mt)}var Tt=new Set;var It=function(e){e["delete"](0);e.add(-0);return!e.has(0)}(Tt);var St=Tt.add(1)===Tt;if(!It||!St){var Et=Set.prototype.add;Set.prototype.add=function mn(e){Et.call(this,e===0?0:e);return this};N.preserveToString(Set.prototype.add,Et)}if(!It){var xt=Set.prototype.has;Set.prototype.has=function On(e){return xt.call(this,e===0?0:e)};N.preserveToString(Set.prototype.has,xt);var _t=Set.prototype["delete"];Set.prototype["delete"]=function wn(e){return _t.call(this,e===0?0:e)};N.preserveToString(Set.prototype["delete"],_t)}var Pt=v(g.Map,function(e){var t=new e([]);t.set(42,42);return t instanceof e});var Nt=Object.setPrototypeOf&&!Pt;var Ct=function(){try{return!(g.Map()instanceof g.Map)}catch(e){return e instanceof TypeError}}();if(g.Map.length!==0||Nt||!Ct){var At=g.Map;g.Map=function jn(){if(!(this instanceof jn)){throw new TypeError('Constructor Map requires "new"')}var e=arguments.length>0?new At(arguments[0]):new At;Object.setPrototypeOf(e,jn.prototype);c(e,"constructor",jn,true);return e};g.Map.prototype=At.prototype;N.preserveToString(g.Map,At)}var kt=v(g.Set,function(e){var t=new e([]);t.add(42,42);return t instanceof e});var Rt=Object.setPrototypeOf&&!kt;var Lt=function(){try{return!(g.Set()instanceof g.Set)}catch(e){return e instanceof TypeError}}();if(g.Set.length!==0||Rt||!Lt){var zt=g.Set;g.Set=function Mn(){if(!(this instanceof Mn)){throw new TypeError('Constructor Set requires "new"')}var e=arguments.length>0?new zt(arguments[0]):new zt;Object.setPrototypeOf(e,Mn.prototype);c(e,"constructor",Mn,true);return e};g.Set.prototype=zt.prototype;N.preserveToString(g.Set,zt)}var Ft=!r(function(){return(new Map).keys().next().done});if(typeof g.Map.prototype.clear!=="function"||(new g.Set).size!==0||(new g.Map).size!==0||typeof g.Map.prototype.keys!=="function"||typeof g.Set.prototype.keys!=="function"||typeof g.Map.prototype.forEach!=="function"||typeof g.Set.prototype.forEach!=="function"||n(g.Map)||n(g.Set)||typeof(new g.Map).keys().next!=="function"||Ft||!Pt){delete g.Map;delete g.Set;l(g,{Map:yt.Map,Set:yt.Set},true)}}if(g.Set.prototype.keys!==g.Set.prototype.values){c(g.Set.prototype,"keys",g.Set.prototype.values,true)}k(Object.getPrototypeOf((new g.Map).keys()));k(Object.getPrototypeOf((new g.Set).keys()))}if(!g.Reflect){c(g,"Reflect",{})}var Dt=g.Reflect;var qt=function Tn(e){if(!z.TypeIsObject(e)){throw new TypeError("target must be an object")}};l(g.Reflect,{apply:function In(){return z.Call.apply(null,arguments)},construct:function Sn(e,t){if(!z.IsCallable(e)){throw new TypeError("First argument must be callable.")}return z.Construct(e,t)},deleteProperty:function En(e,t){qt(e);if(i){var r=Object.getOwnPropertyDescriptor(e,t);if(r&&!r.configurable){return false}}return delete e[t]},enumerate:function xn(e){qt(e);return new B(e,"key")},has:function _n(e,t){qt(e);return t in e}});if(Object.getOwnPropertyNames){l(g.Reflect,{ownKeys:function Pn(e){qt(e);var t=Object.getOwnPropertyNames(e);if(z.IsCallable(Object.getOwnPropertySymbols)){t.push.apply(t,Object.getOwnPropertySymbols(e))}return t}})}var Gt=function Nn(e){return!t(e)};if(Object.preventExtensions){l(g.Reflect,{isExtensible:function Cn(e){qt(e);return Object.isExtensible(e)},preventExtensions:function An(e){qt(e);return Gt(function(){Object.preventExtensions(e)})}})}if(i){var Ht=function kn(e,t,r){var n=Object.getOwnPropertyDescriptor(e,t);if(!n){var o=Object.getPrototypeOf(e);if(o===null){return undefined}return Ht(o,t,r)}if("value"in n){return n.value}if(n.get){return n.get.call(r)}return undefined};var Wt=function Rn(e,t,r,n){var o=Object.getOwnPropertyDescriptor(e,t);if(!o){var i=Object.getPrototypeOf(e);if(i!==null){return Wt(i,t,r,n)}o={value:void 0,writable:true,enumerable:true,configurable:true}}if("value"in o){if(!o.writable){return false}if(!z.TypeIsObject(n)){return false}var a=Object.getOwnPropertyDescriptor(n,t);if(a){return Dt.defineProperty(n,t,{value:r})}else{return Dt.defineProperty(n,t,{value:r,writable:true,enumerable:true,configurable:true})}}if(o.set){o.set.call(n,r);return true}return false};l(g.Reflect,{defineProperty:function Ln(e,t,r){qt(e);return Gt(function(){Object.defineProperty(e,t,r)})},getOwnPropertyDescriptor:function zn(e,t){qt(e);return Object.getOwnPropertyDescriptor(e,t)},get:function Fn(e,t){qt(e);var r=arguments.length>2?arguments[2]:e;return Ht(e,t,r)},set:function Dn(e,t,r){qt(e);var n=arguments.length>3?arguments[3]:e;return Wt(e,t,r,n)}})}if(Object.getPrototypeOf){var Vt=Object.getPrototypeOf;l(g.Reflect,{getPrototypeOf:function qn(e){qt(e);return Vt(e)}})}if(Object.setPrototypeOf){var $t=function(e,t){while(t){if(e===t){return true}t=Dt.getPrototypeOf(t)}return false};l(g.Reflect,{setPrototypeOf:function Gn(e,t){qt(e);if(t!==null&&!z.TypeIsObject(t)){throw new TypeError("proto must be an object or null")}if(t===Dt.getPrototypeOf(e)){return true}if(Dt.isExtensible&&!Dt.isExtensible(e)){return false}if($t(e,t)){return false}Object.setPrototypeOf(e,t);return true}})}if(String(new Date(NaN))!=="Invalid Date"){var Ut=Date.prototype.toString;var Xt=function Hn(){var e=+this;if(e!==e){return"Invalid Date"}return Ut.call(this)};C(Date.prototype,"toString",Xt)}var Zt={anchor:function Wn(e){return z.CreateHTML(this,"a","name",e)},big:function Vn(){return z.CreateHTML(this,"big","","")},blink:function $n(){return z.CreateHTML(this,"blink","","")},bold:function Un(){return z.CreateHTML(this,"b","","")},fixed:function Xn(){return z.CreateHTML(this,"tt","","")},fontcolor:function Zn(e){return z.CreateHTML(this,"font","color",e)},fontsize:function Kn(e){return z.CreateHTML(this,"font","size",e)},italics:function Bn(){return z.CreateHTML(this,"i","","")},link:function Jn(e){return z.CreateHTML(this,"a","href",e)},small:function Qn(){return z.CreateHTML(this,"small","","")},strike:function Yn(){return z.CreateHTML(this,"strike","","")},sub:function eo(){return z.CreateHTML(this,"sub","","")},sup:function to(){return z.CreateHTML(this,"sup","","")}};l(String.prototype,Zt);a(Object.keys(Zt),function(e){var t=String.prototype[e];var r=false;if(z.IsCallable(t)){var n=t.call("",' " ');var o=[].concat(n.match(/"/g)).length;r=n!==n.toLowerCase()||o>2}else{r=true}if(r){c(String.prototype,e,Zt[e],true)}});return g});
//# sourceMappingURL=es6-shim.map
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var _createClass = (function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
})();

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { "default": obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/**
  * @Animator Class
  *
  * @description Houses all Animator functionality
  * @returns {Object}
  */

var _prefixes = require("./prefixes");

var _prefixes2 = _interopRequireDefault(_prefixes);

var _cssUtils = require("./css-utils");

var _cssUtils2 = _interopRequireDefault(_cssUtils);

var _domUtils = require("./dom-utils");

var _domUtils2 = _interopRequireDefault(_domUtils);

var _animationSeq = require("./animation-seq");

var _animationSeq2 = _interopRequireDefault(_animationSeq);

var _transitionSeq = require("./transition-seq");

var _transitionSeq2 = _interopRequireDefault(_transitionSeq);

var _comboSeq = require("./combo-seq");

var _comboSeq2 = _interopRequireDefault(_comboSeq);

var _seqWrapper = require("./seq-wrapper");

var _seqWrapper2 = _interopRequireDefault(_seqWrapper);

var _tracker = require("./tracker");

var _tracker2 = _interopRequireDefault(_tracker);

var _es6Promise = require("./es6-promise");

var Animator = (function () {

  /**
    * @constructor function
    *
    * @description Creates a stylesheet and Tracker object to be used throughout Animator.
    */

  function Animator() {
    _classCallCheck(this, Animator);

    this.stylesheet = new _cssUtils2["default"]().createStyleSheet();
    this.tracker = new _tracker2["default"](_domUtils2["default"], _prefixes2["default"], _cssUtils2["default"], _transitionSeq2["default"]);
  }

  _createClass(Animator, [{
    key: "getPrefix",

    /**
      * @getPrefix function
      *
      * @params {String}
      * @description Returns a prefixed CSS property or DOM event name.
      * @return {String}
      */

    value: function getPrefix(prefix) {
      return new _prefixes2["default"]().getPrefix(prefix);
    }
  }, {
    key: "setStyles",

    /**
      * @setStyles function
      *
      * @params {HTMLElement, String / Array}
      * @description Sets properties / values on an element's CSSStyleDeclaration.
      */

    value: function setStyles(element, styles) {
      return new _cssUtils2["default"]().setStyles(element, styles);
    }
  }, {
    key: "getStyles",

    /**
      * @getStyles function
      *
      * @params {HTMLElement, Object}
      * @description Return an object of CSS properties / values.
      * @return {Object}
      */

    value: function getStyles(element, properties) {
      return new _cssUtils2["default"]().getStyles(element, properties);
    }
  }, {
    key: "createTransition",

    /**
      * @createTransition function
      *
      * @params {Object}
      * @description Creates a CSS transition definition.
      */

    value: function createTransition(transition) {
      new _cssUtils2["default"]().createTransition(transition, _prefixes2["default"]);
    }
  }, {
    key: "createAnimation",

    /**
      * @createAnimation function
      *
      * @params {Object}
      * @description Creates a CSS keyframe animation definition.
      */

    value: function createAnimation(animation) {
      new _cssUtils2["default"]().createKeyframeAnimation(animation, _prefixes2["default"], this.stylesheet);
    }
  }, {
    key: "createClass",

    /**
      * @createClass function
      *
      * @params {String, Object}
      * @description Creates a CSS class and appends it to the stylesheet.
      */

    value: function createClass(className, rules) {
      new _cssUtils2["default"]().createClass(className, this.stylesheet, rules);
    }
  }, {
    key: "deleteClass",

    /**
      * @deleteClass function
      *
      * @params {String}
      * @description Deletes a CSS class from the stylesheet.
      */

    value: function deleteClass(className) {
      new _cssUtils2["default"]().deleteClass(className, this.stylesheet);
    }
  }, {
    key: "addClass",

    /**
      * @addClass function
      *
      * @params {HTMLElement, String / Array}
      * @description Sets a class(es) on an element.
      */

    value: function addClass(element, classList) {
      new _domUtils2["default"]().setClass(element, classList, true);
    }
  }, {
    key: "removeClass",

    /**
      * @removeClass function
      *
      * @params {HTMLElement, String / Array}
      * @description Removes a class(es) from an element.
      */

    value: function removeClass(element, classList) {
      new _domUtils2["default"]().setClass(element, classList, false);
    }
  }, {
    key: "transition",

    /**
      * @transition function
      *
      * @params {Object}
      * @description Creates a transition sequence.
      * @returns {Promise}
      */

    value: function transition(options) {
      return new _seqWrapper2["default"](options, _domUtils2["default"], _prefixes2["default"], _cssUtils2["default"], _es6Promise.Promise, _transitionSeq2["default"], _comboSeq2["default"], this.tracker);
    }
  }, {
    key: "animation",

    /**
      * @animation function
      *
      * @params {Object}
      * @description Creates an animation sequence.
      * @returns {Promise}
      */

    value: function animation(options) {
      return new _seqWrapper2["default"](options, _domUtils2["default"], _prefixes2["default"], _cssUtils2["default"], _es6Promise.Promise, _animationSeq2["default"], _comboSeq2["default"], this.tracker);
    }
  }, {
    key: "combo",

    /**
      * @combo function
      *
      * @params {Object}
      * @description Creates an combination of sequence.
      * @returns {Promise}
      */

    value: function combo(animations) {
      return new _comboSeq2["default"](animations, _es6Promise.Promise);
    }
  }, {
    key: "isSupported",

    /**
      * @isSupported function
      *
      * @description Tests the browser for Animator support.
      * @returns {Boolean}
      */

    value: function isSupported() {
      return new _domUtils2["default"]().support(_prefixes2["default"], _cssUtils2["default"], this.stylesheet);
    }
  }, {
    key: "pause",

    /**
      * @pause function
      *
      * @description Pause the current sequence.
      */

    value: function pause() {
      this.tracker.pause();
    }
  }, {
    key: "play",

    /**
      * @play function
      *
      * @description Plays the current sequence.
      */

    value: function play() {
      this.tracker.play();
    }
  }]);

  return Animator;
})();

window.Animator = new Animator();

},{"./animation-seq":2,"./combo-seq":3,"./css-utils":4,"./dom-utils":5,"./es6-promise":6,"./prefixes":7,"./seq-wrapper":8,"./tracker":9,"./transition-seq":10}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
		value: true
});

var _createClass = (function () {
		function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
						var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
		}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
})();

function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
		}
}

/**
  * @Animation Class
  *
  * @description Promise based animation handler that resolves when animations triggered on an element are complete.
  * @returns {Resolved Promise}
  */

var Animation = (function () {

		/**
    * @constructor function
    *
    * @params {Object, Class, Class, Class, Class, Object}  
    * @description Creates a new animation sequence.    
  * @params description
  - options {Object} Animation options.
  	- element {HTMLElement} The element to set the animation on.
  	- setStyles {Object} Styles to be set before / after the animation.
  		- before {Object} Object of CSS property / value pairs to be set before the animation.
  		- after {Object} Object of CSS property / value pairs to be set after the animation.
  	- addClass {Object} Object of classnames to be set before / after the animation.
  		- before {String} Classname to set before the animation.
  		- after {String} Classname to set after the animation.
  	- removeClass {Object} Object of classnames to be removed before / after the animation.
  		- before {String} Classname to be removed before the animation.
  		- after {String} Classname to be removed after the animation.
  - DomUtils {Class} Dom utility class.
  - Prefix {Class} Prefix class.
  - CssUtils {Class} CSS Utilities class.
  - Promise {Class} Promise class.
  - Tracker {Object} Object that tracks and monitors sequences.
  * @returns {Promise}
    */

		function Animation(options, DomUtils, Prefix, CssUtils, Promise, Tracker) {
				var _this = this;

				_classCallCheck(this, Animation);

				this.options = options;
				this.domUtils = new DomUtils();
				this.cssUtils = new CssUtils();
				this.prefix = new Prefix().getPrefix("animationend");
				this.onAnimationEnd = this.animationEnd.bind(this);
				this.tracker = Tracker;

				return new Promise(function (resolve, reject) {
						_this.resolve = resolve;
						_this.reject = reject;
						_this.animationFrame = requestAnimationFrame(_this.animationStart.bind(_this));
				});
		}

		_createClass(Animation, [{
				key: "animationStart",

				/**
      * @animationStart function
      *
      * @description Sets classnames / style rules to trigger the animation.
      * @global no
      */

				value: function animationStart() {

						var opts = this.options;
						opts.element.addEventListener(this.prefix, this.onAnimationEnd, false);

						if (opts.setStyles && opts.setStyles.before) {
								this.cssUtils.setStyles(opts.element, opts.setStyles.before);
						}

						if (opts.removeClass && opts.removeClass.before) {
								this.domUtils.setClass(opts.element, opts.removeClass.before, false);
						}

						if (opts.addClass && opts.addClass.before) {
								this.domUtils.setClass(opts.element, opts.addClass.before, true);
						}
				}
		}, {
				key: "animationEnd",

				/**
      * @animationEnd function
      *
      * @description Sets classnames / style rules after all animations have completed and removes the element from the tracker.
      * @global no
      * @returns {Resolved Promise}
      */

				value: function animationEnd() {

						var opts = this.options;
						opts.element.removeEventListener(this.prefix, this.onAnimationEnd, false);
						cancelAnimationFrame(this.animationFrame);

						if (opts.setStyles && opts.setStyles.after) {
								this.cssUtils.setStyles(opts.element, opts.setStyles.after);
						}

						if (opts.removeClass && opts.removeClass.after) {
								this.domUtils.setClass(opts.element, opts.removeClass.after, false);
						}

						if (opts.addClass && opts.addClass.after) {
								this.domUtils.setClass(opts.element, opts.addClass.after, true);
						}

						this.tracker.remove("Animations", opts.element);
						this.resolve(opts.element);
				}
		}]);

		return Animation;
})();

exports["default"] = Animation;
module.exports = exports["default"];

},{}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () {
	function defineProperties(target, props) {
		for (var i = 0; i < props.length; i++) {
			var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
		}
	}return function (Constructor, protoProps, staticProps) {
		if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	};
})();

function _classCallCheck(instance, Constructor) {
	if (!(instance instanceof Constructor)) {
		throw new TypeError("Cannot call a class as a function");
	}
}

/**
  * @Combo Class
  *
  * @description Wraps a Promise around x amount of sequences and resolves when all sequences have resolved.
  * @returns {Resolved Promise}
  */

var Combo = (function () {

	/**
   * @constructor function
   *
   * @params {Array, Class}  
   * @description Wraps x amount of sequences in a Promise.    
 * @params description
 - sequences {Array} An array of sequences.
 - Promise {Class} Promise class.
 * @returns {Promise}
   */

	function Combo(sequences, Promise) {
		var _this = this;

		_classCallCheck(this, Combo);

		return new Promise(function (resolve, reject) {

			var watcher = _this.sequenceWatcher();
			_this.resolve = resolve;
			_this.reject = reject;
			_this.amount = sequences.length;

			sequences.forEach(function (sequence) {

				sequence.then(function (element) {
					watcher(element);
				})["catch"](function (e) {
					_this.reject(e);
				});
			});
		});
	}

	_createClass(Combo, [{
		key: "sequenceWatcher",

		/**
    * @sequenceWatcher function
    *
    * @description Captures resolved sequences and resolves when all have been resolved.   
  * @returns {Resolved Promise}
    * @global no
    */

		value: function sequenceWatcher() {
			var _this2 = this;

			var count = 0;
			var returnData = [];
			return function (element) {

				count++;
				returnData.push(element);
				if (count === _this2.amount) {
					_this2.resolve(returnData);
				}
			};
		}
	}]);

	return Combo;
})();

exports["default"] = Combo;
module.exports = exports["default"];

},{}],4:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
})();

function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;
    } else {
        return Array.from(arr);
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

/**
  * @CssUtils Class
  *
  * @description CSS utility belt for Animator using the CSSOM (file:/// protocol not supported in Chrome) 
  * @returns {Object}
  */

var CssUtils = (function () {
    function CssUtils() {
        _classCallCheck(this, CssUtils);
    }

    _createClass(CssUtils, [{
        key: "createStyleSheet",

        /**
          * @createStyleSheet function
          *
          * @description Creates a stylesheet for any transition / animation / style classes created in Animator.
          * @returns {CSSStyleSheet} stylesheet
          * @global no
          */

        value: function createStyleSheet() {

            var style = document.createElement("style");
            style.appendChild(document.createTextNode(""));
            document.head.appendChild(style);
            return style.sheet;
        }
    }, {
        key: "cssTextToJs",

        /**
          * @cssTextToJs function
          *
          * @params {String}
          * @description Converts a hyphen delimted CSS property to a camel cased JavaScript property.
          * @returns {String}
          * @global no
          */

        value: function cssTextToJs(cssText) {

            var jsText = "";

            if (/\-/g.test(cssText)) {
                cssText.replace(/\-/g, " ").replace(/\w\S*/g, function (txt) {
                    txt = txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
                    if (txt) {
                        jsText += txt;
                    }
                });
                return jsText.charAt(0).toLowerCase() + jsText.substr(1);
            } else {
                return cssText;
            }

            // styleProp = styleProp.replace(/\-(\w)/g, function(str, letter) {
            //     return letter.toUpperCase();
            // });
        }
    }, {
        key: "setStyles",

        /**
          * @setStyles function
          *
          * @params {HTMLElement, Object, Boolean}
          * @description Sets properties on an element's CSSStyleDeclaration.
          * @params description      
          *  - element: {HTMLElement} HTML element to set styles properties on.
             - styles : {Object} Object containing CSS property / value pairs.
             - important : Boolean specifiying if the CSS value is to be set as important. 
          * @global yes
          */

        value: function setStyles(element, styles, important) {

            Object.keys(styles).forEach(function (property) {
                var important = important || styles[property].includes("important") ? "important" : null;
                var rules = styles[property].replace(/!?important/, "").trim();
                element.style.setProperty(property, rules, important);
            });
        }
    }, {
        key: "getStyles",

        /**
          * @getStyles function
          *
          * @params {HTMLElement, String / Array}
          * @description Queries properties set on an element's CSSStyleDeclaration.
          * @params description      
          *  - element: {HTMLElement} HTML element to query againts its style properties.
             - props : {String / Array} String or Array of strings of CSS properties to query.
          * @returns {Object} Object of CSS property / value pairs
          * @global yes
          */

        value: function getStyles(element, props) {
            var _this = this;

            var properties = Array.isArray(props) ? [].concat(_toConsumableArray(props)) : [props];
            var styles = {},
                temp = {};
            properties.forEach(function (property) {
                temp[property] = window.getComputedStyle(element).getPropertyValue(property);
                element.style.removeProperty(property);
                styles[property] = window.getComputedStyle(element).getPropertyValue(property);
                _this.setStyles(element, temp);
            });
            return styles;
        }
    }, {
        key: "createTransition",

        /**
          * @createTransition function
          *
          * @params {Object, Class}
          * @description Creates a string defining an element's CSS transition values and sets it on the element's CSSStyleDeclaration. 
          * @params description      
          *  - transition: {Object} An object of transition properties.
                 - elements {HTMLElement / Nodelist} HTMLElement(s) to set transition on.
                 - properties {String / Array} CSS properties to transition.
                 - duration {String / Array} Ms or S transition duration value(s).
                 - easing {String / Array} (Optional) Transition timing function value(s).
                 - delay {String / Array} (Optional) Transition delay value(s).
             - Prefix : {Class} Prefix class.
          * @global yes
          */

        value: function createTransition(transition, Prefix) {
            var _this2 = this;

            var transitionPrefix = new Prefix().getPrefix("transition");
            var elements = transition.element.length ? Array.from(transition.element) : [transition.element];
            var properties = Array.isArray(transition.properties) ? [].concat(_toConsumableArray(transition.properties)) : [transition.properties];
            var duration = Array.isArray(transition.duration) ? [].concat(_toConsumableArray(transition.duration)) : [transition.duration];
            var easing = Array.isArray(transition.easing) ? [].concat(_toConsumableArray(transition.easing)) : [transition.easing];
            var delay = Array.isArray(transition.delay) ? [].concat(_toConsumableArray(transition.delay)) : [transition.delay];

            elements.forEach(function (element) {

                var transitionString = "";
                var rules = {};

                properties.forEach(function (prop, i) {

                    transitionString += " ";
                    transitionString += properties.length > 1 ? properties[i] + " " : properties[0] + " ";
                    transitionString += duration.length > 1 ? duration[i] + " " : duration[0] + " ";
                    transitionString += easing.length > 1 ? easing[i] + " " : (easing[0] || "ease") + " ";
                    transitionString += delay.length > 1 ? delay[i] + "," : (delay[0] || "0s") + ",";
                });

                transitionString = transitionString.substr(0, transitionString.length - 1);
                rules[transitionPrefix] = transitionString;
                _this2.setStyles(element, rules);
            });
        }
    }, {
        key: "createKeyframeAnimation",

        /**
          * @createKeyframeAnimation function
          *
          * @params {Object, Class, CSSStyleSheet}
          * @description Creates a CSS keyframe animation, and optional associated style class, and inserts it/them into Animator's stylesheet. 
          * @params description      
          *  - animation: {Object} An object of animation properties.
                 - name {HTMLElement / Nodelist} HTMLElement(s) to set transition on.
                 - animation {Object} Either from / to or % based keyframes and CSS properties / values.
                 - animationClass {Object} (Optional) A CSS class to trigger the animation.
                     - name {String} The classname.
                     - rules {Object} Object of CSS property / value pairs.
             - Prefix : {Class} Prefix class.
             - stylesheet : {CSSStyleSheet} Animator's stylesheet.
          * @global yes
          */

        value: function createKeyframeAnimation(animation, Prefix, stylesheet) {

            var animationString = "";
            var prefix = new Prefix();
            var keyFrame = prefix.getPrefix("keyframes");
            keyFrame += " " + animation.name + " {\n";

            Object.keys(animation.animation).forEach(function (anim) {
                animationString += anim + " {";
                Object.keys(animation.animation[anim]).forEach(function (property) {
                    animationString += "\n" + property + " : " + animation.animation[anim][property] + ";";
                });
                animationString += "\n }\n";
            });

            animationString += "}";

            stylesheet.insertRule(keyFrame + animationString, stylesheet.cssRules.length);
            if (animation.animationClass) {
                this.createClass(animation.animationClass.name, stylesheet, animation.animationClass.rules);
            }
        }
    }, {
        key: "createClass",

        /**
          * @createClass function
          *
          * @params {String, CSSStyleSheet, Object (Optional)}
          * @description Defines a CSS class and inserts it into Animator's stylesheet. 
          * @params description      
          *  - className: {String} The name of the class.
             - stylesheet : {CSSStyleSheet} Animator's stylesheet.
             - rules : {Object} (Optional) Object of CSS property / value pairs.
          * @global yes
          */

        value: function createClass(className, stylesheet) {
            var rules = arguments[2] === undefined ? {} : arguments[2];

            var name = "." + className;
            var cssString = "{ ";

            Object.keys(rules).forEach(function (rule) {
                cssString += rule + " : " + rules[rule] + "; ";
            });

            cssString += "}";
            stylesheet.insertRule(name + cssString, stylesheet.cssRules.length);
        }
    }, {
        key: "deleteClass",

        /**
          * @deleteClass function
          *
          * @params {String, CSSStyleSheet}
          * @description Removes a CSS class from Animator's stylesheet. 
          * @params description      
          *  - className: {String} The name of the class to remove.
             - stylesheet : {CSSStyleSheet} Animator's stylesheet.
          * @global yes
          */

        value: function deleteClass(className, stylesheet) {

            var rules = stylesheet.rules || stylesheet.cssRules;
            var name = "." + className;
            Object.keys(rules).forEach(function (rule) {
                if (rules[rule] instanceof CSSStyleRule && rules[rule].selectorText === name) {
                    stylesheet.deleteRule(rule);
                }
            });
        }
    }]);

    return CssUtils;
})();

exports["default"] = CssUtils;
module.exports = exports["default"];

},{}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () {
	function defineProperties(target, props) {
		for (var i = 0; i < props.length; i++) {
			var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
		}
	}return function (Constructor, protoProps, staticProps) {
		if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	};
})();

function _toConsumableArray(arr) {
	if (Array.isArray(arr)) {
		for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;
	} else {
		return Array.from(arr);
	}
}

function _classCallCheck(instance, Constructor) {
	if (!(instance instanceof Constructor)) {
		throw new TypeError("Cannot call a class as a function");
	}
}

/**
  * @DomUtils Class
  *
  * @description Provides DOM utilities for Animator.
  * @returns {Object}
  */

var DomUtils = (function () {
	function DomUtils() {
		_classCallCheck(this, DomUtils);
	}

	_createClass(DomUtils, [{
		key: "setClass",

		/**
    * @setClass function
    *
    * @params {HTMLElement, String / Array, Boolean}
    * @description Adds or removes class(es) from an element.
    * @params description      
    *  - element: {HTMLElement} The element to add / remove the class(es) to / from.
    *  - classList: {String / Array} A single classname or array of classnames to add / remove.
    *	- add: {Boolean} Specifiying whether to add / remove the class(es).
    * @global yes
    */

		value: function setClass(element, classList, add) {

			var classes = Array.isArray(classList) ? [].concat(_toConsumableArray(classList)) : [classList];
			var elements = element.length ? Array.from(element) : [element];
			var action = add ? "add" : "remove";
			classes.forEach(function (cls) {
				elements.forEach(function (el) {
					el.classList[action](cls);
				});
			});
		}
	}, {
		key: "support",

		/**
    * @support function
    *
    * @params {Class, Class, CSSStyleSheet}
    * @description Tests for CSS transition / animation / CSSOM manipulation support
    * @params description      
    *  - Prefix: {Class} Prefix class.
    *  - CssUtils: {Class} CSS utilities class.
    *	- stylesheet: {CSSStyleSheet} Stylesheet to test inserting / removing style rules on.
    * @global yes
    */

		value: function support(Prefix, CssUtils, stylesheet) {

			var prefix = new Prefix();
			var cssUtils = new CssUtils();
			var cssomSupport = false;
			var transitionSupport = prefix.getPrefix("transition");
			var animationSupport = prefix.getPrefix("animation");

			try {
				cssUtils.createClass("AnimatorTestClass", stylesheet);
				cssUtils.deleteClass("AnimatorTestClass", stylesheet);
				cssomSupport = true;
			} catch (e) {
				cssomSupport = false;
			}

			return transitionSupport && animationSupport && cssomSupport;
		}
	}]);

	return DomUtils;
})();

exports["default"] = DomUtils;
module.exports = exports["default"];

},{}],6:[function(require,module,exports){
(function (process,global){
/*!
 * @overview es6-promise - a tiny implementation of Promises/A+.
 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
 * @license   Licensed under MIT license
 *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE
 * @version   2.1.1
 */

'use strict';

(function () {
  'use strict';
  function lib$es6$promise$utils$$objectOrFunction(x) {
    return typeof x === 'function' || typeof x === 'object' && x !== null;
  }

  function lib$es6$promise$utils$$isFunction(x) {
    return typeof x === 'function';
  }

  function lib$es6$promise$utils$$isMaybeThenable(x) {
    return typeof x === 'object' && x !== null;
  }

  var lib$es6$promise$utils$$_isArray;
  if (!Array.isArray) {
    lib$es6$promise$utils$$_isArray = function (x) {
      return Object.prototype.toString.call(x) === '[object Array]';
    };
  } else {
    lib$es6$promise$utils$$_isArray = Array.isArray;
  }

  var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;
  var lib$es6$promise$asap$$len = 0;
  var lib$es6$promise$asap$$toString = ({}).toString;
  var lib$es6$promise$asap$$vertxNext;
  function lib$es6$promise$asap$$asap(callback, arg) {
    lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;
    lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;
    lib$es6$promise$asap$$len += 2;
    if (lib$es6$promise$asap$$len === 2) {
      // If len is 2, that means that we need to schedule an async flush.
      // If additional callbacks are queued before the queue is flushed, they
      // will be processed by this flush that we are scheduling.
      lib$es6$promise$asap$$scheduleFlush();
    }
  }

  var lib$es6$promise$asap$$default = lib$es6$promise$asap$$asap;

  var lib$es6$promise$asap$$browserWindow = typeof window !== 'undefined' ? window : undefined;
  var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};
  var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;
  var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';

  // test for web worker but not in IE10
  var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';

  // node
  function lib$es6$promise$asap$$useNextTick() {
    var nextTick = process.nextTick;
    // node version 0.10.x displays a deprecation warning when nextTick is used recursively
    // setImmediate should be used instead instead
    var version = process.versions.node.match(/^(?:(\d+)\.)?(?:(\d+)\.)?(\*|\d+)$/);
    if (Array.isArray(version) && version[1] === '0' && version[2] === '10') {
      nextTick = setImmediate;
    }
    return function () {
      nextTick(lib$es6$promise$asap$$flush);
    };
  }

  // vertx
  function lib$es6$promise$asap$$useVertxTimer() {
    return function () {
      lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);
    };
  }

  function lib$es6$promise$asap$$useMutationObserver() {
    var iterations = 0;
    var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);
    var node = document.createTextNode('');
    observer.observe(node, { characterData: true });

    return function () {
      node.data = iterations = ++iterations % 2;
    };
  }

  // web worker
  function lib$es6$promise$asap$$useMessageChannel() {
    var channel = new MessageChannel();
    channel.port1.onmessage = lib$es6$promise$asap$$flush;
    return function () {
      channel.port2.postMessage(0);
    };
  }

  function lib$es6$promise$asap$$useSetTimeout() {
    return function () {
      setTimeout(lib$es6$promise$asap$$flush, 1);
    };
  }

  var lib$es6$promise$asap$$queue = new Array(1000);
  function lib$es6$promise$asap$$flush() {
    for (var i = 0; i < lib$es6$promise$asap$$len; i += 2) {
      var callback = lib$es6$promise$asap$$queue[i];
      var arg = lib$es6$promise$asap$$queue[i + 1];

      callback(arg);

      lib$es6$promise$asap$$queue[i] = undefined;
      lib$es6$promise$asap$$queue[i + 1] = undefined;
    }

    lib$es6$promise$asap$$len = 0;
  }

  function lib$es6$promise$asap$$attemptVertex() {
    try {
      var r = require;
      var vertx = r('vertx');
      lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;
      return lib$es6$promise$asap$$useVertxTimer();
    } catch (e) {
      return lib$es6$promise$asap$$useSetTimeout();
    }
  }

  var lib$es6$promise$asap$$scheduleFlush;
  // Decide what async method to use to triggering processing of queued callbacks:
  if (lib$es6$promise$asap$$isNode) {
    lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();
  } else if (lib$es6$promise$asap$$BrowserMutationObserver) {
    lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();
  } else if (lib$es6$promise$asap$$isWorker) {
    lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();
  } else if (lib$es6$promise$asap$$browserWindow === undefined && typeof require === 'function') {
    lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertex();
  } else {
    lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();
  }

  function lib$es6$promise$$internal$$noop() {}

  var lib$es6$promise$$internal$$PENDING = void 0;
  var lib$es6$promise$$internal$$FULFILLED = 1;
  var lib$es6$promise$$internal$$REJECTED = 2;

  var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();

  function lib$es6$promise$$internal$$selfFullfillment() {
    return new TypeError('You cannot resolve a promise with itself');
  }

  function lib$es6$promise$$internal$$cannotReturnOwn() {
    return new TypeError('A promises callback cannot return that same promise.');
  }

  function lib$es6$promise$$internal$$getThen(promise) {
    try {
      return promise.then;
    } catch (error) {
      lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;
      return lib$es6$promise$$internal$$GET_THEN_ERROR;
    }
  }

  function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {
    try {
      then.call(value, fulfillmentHandler, rejectionHandler);
    } catch (e) {
      return e;
    }
  }

  function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {
    lib$es6$promise$asap$$default(function (promise) {
      var sealed = false;
      var error = lib$es6$promise$$internal$$tryThen(then, thenable, function (value) {
        if (sealed) {
          return;
        }
        sealed = true;
        if (thenable !== value) {
          lib$es6$promise$$internal$$resolve(promise, value);
        } else {
          lib$es6$promise$$internal$$fulfill(promise, value);
        }
      }, function (reason) {
        if (sealed) {
          return;
        }
        sealed = true;

        lib$es6$promise$$internal$$reject(promise, reason);
      }, 'Settle: ' + (promise._label || ' unknown promise'));

      if (!sealed && error) {
        sealed = true;
        lib$es6$promise$$internal$$reject(promise, error);
      }
    }, promise);
  }

  function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {
    if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {
      lib$es6$promise$$internal$$fulfill(promise, thenable._result);
    } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {
      lib$es6$promise$$internal$$reject(promise, thenable._result);
    } else {
      lib$es6$promise$$internal$$subscribe(thenable, undefined, function (value) {
        lib$es6$promise$$internal$$resolve(promise, value);
      }, function (reason) {
        lib$es6$promise$$internal$$reject(promise, reason);
      });
    }
  }

  function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {
    if (maybeThenable.constructor === promise.constructor) {
      lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);
    } else {
      var then = lib$es6$promise$$internal$$getThen(maybeThenable);

      if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {
        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);
      } else if (then === undefined) {
        lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
      } else if (lib$es6$promise$utils$$isFunction(then)) {
        lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);
      } else {
        lib$es6$promise$$internal$$fulfill(promise, maybeThenable);
      }
    }
  }

  function lib$es6$promise$$internal$$resolve(promise, value) {
    if (promise === value) {
      lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFullfillment());
    } else if (lib$es6$promise$utils$$objectOrFunction(value)) {
      lib$es6$promise$$internal$$handleMaybeThenable(promise, value);
    } else {
      lib$es6$promise$$internal$$fulfill(promise, value);
    }
  }

  function lib$es6$promise$$internal$$publishRejection(promise) {
    if (promise._onerror) {
      promise._onerror(promise._result);
    }

    lib$es6$promise$$internal$$publish(promise);
  }

  function lib$es6$promise$$internal$$fulfill(promise, value) {
    if (promise._state !== lib$es6$promise$$internal$$PENDING) {
      return;
    }

    promise._result = value;
    promise._state = lib$es6$promise$$internal$$FULFILLED;

    if (promise._subscribers.length !== 0) {
      lib$es6$promise$asap$$default(lib$es6$promise$$internal$$publish, promise);
    }
  }

  function lib$es6$promise$$internal$$reject(promise, reason) {
    if (promise._state !== lib$es6$promise$$internal$$PENDING) {
      return;
    }
    promise._state = lib$es6$promise$$internal$$REJECTED;
    promise._result = reason;

    lib$es6$promise$asap$$default(lib$es6$promise$$internal$$publishRejection, promise);
  }

  function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {
    var subscribers = parent._subscribers;
    var length = subscribers.length;

    parent._onerror = null;

    subscribers[length] = child;
    subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;
    subscribers[length + lib$es6$promise$$internal$$REJECTED] = onRejection;

    if (length === 0 && parent._state) {
      lib$es6$promise$asap$$default(lib$es6$promise$$internal$$publish, parent);
    }
  }

  function lib$es6$promise$$internal$$publish(promise) {
    var subscribers = promise._subscribers;
    var settled = promise._state;

    if (subscribers.length === 0) {
      return;
    }

    var child,
        callback,
        detail = promise._result;

    for (var i = 0; i < subscribers.length; i += 3) {
      child = subscribers[i];
      callback = subscribers[i + settled];

      if (child) {
        lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);
      } else {
        callback(detail);
      }
    }

    promise._subscribers.length = 0;
  }

  function lib$es6$promise$$internal$$ErrorObject() {
    this.error = null;
  }

  var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();

  function lib$es6$promise$$internal$$tryCatch(callback, detail) {
    try {
      return callback(detail);
    } catch (e) {
      lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;
      return lib$es6$promise$$internal$$TRY_CATCH_ERROR;
    }
  }

  function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {
    var hasCallback = lib$es6$promise$utils$$isFunction(callback),
        value,
        error,
        succeeded,
        failed;

    if (hasCallback) {
      value = lib$es6$promise$$internal$$tryCatch(callback, detail);

      if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {
        failed = true;
        error = value.error;
        value = null;
      } else {
        succeeded = true;
      }

      if (promise === value) {
        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());
        return;
      }
    } else {
      value = detail;
      succeeded = true;
    }

    if (promise._state !== lib$es6$promise$$internal$$PENDING) {} else if (hasCallback && succeeded) {
      lib$es6$promise$$internal$$resolve(promise, value);
    } else if (failed) {
      lib$es6$promise$$internal$$reject(promise, error);
    } else if (settled === lib$es6$promise$$internal$$FULFILLED) {
      lib$es6$promise$$internal$$fulfill(promise, value);
    } else if (settled === lib$es6$promise$$internal$$REJECTED) {
      lib$es6$promise$$internal$$reject(promise, value);
    }
  }

  function lib$es6$promise$$internal$$initializePromise(promise, resolver) {
    try {
      resolver(function resolvePromise(value) {
        lib$es6$promise$$internal$$resolve(promise, value);
      }, function rejectPromise(reason) {
        lib$es6$promise$$internal$$reject(promise, reason);
      });
    } catch (e) {
      lib$es6$promise$$internal$$reject(promise, e);
    }
  }

  function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {
    var enumerator = this;

    enumerator._instanceConstructor = Constructor;
    enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);

    if (enumerator._validateInput(input)) {
      enumerator._input = input;
      enumerator.length = input.length;
      enumerator._remaining = input.length;

      enumerator._init();

      if (enumerator.length === 0) {
        lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
      } else {
        enumerator.length = enumerator.length || 0;
        enumerator._enumerate();
        if (enumerator._remaining === 0) {
          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);
        }
      }
    } else {
      lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());
    }
  }

  lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function (input) {
    return lib$es6$promise$utils$$isArray(input);
  };

  lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function () {
    return new Error('Array Methods must be provided an Array');
  };

  lib$es6$promise$enumerator$$Enumerator.prototype._init = function () {
    this._result = new Array(this.length);
  };

  var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;

  lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function () {
    var enumerator = this;

    var length = enumerator.length;
    var promise = enumerator.promise;
    var input = enumerator._input;

    for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
      enumerator._eachEntry(input[i], i);
    }
  };

  lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function (entry, i) {
    var enumerator = this;
    var c = enumerator._instanceConstructor;

    if (lib$es6$promise$utils$$isMaybeThenable(entry)) {
      if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {
        entry._onerror = null;
        enumerator._settledAt(entry._state, i, entry._result);
      } else {
        enumerator._willSettleAt(c.resolve(entry), i);
      }
    } else {
      enumerator._remaining--;
      enumerator._result[i] = entry;
    }
  };

  lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function (state, i, value) {
    var enumerator = this;
    var promise = enumerator.promise;

    if (promise._state === lib$es6$promise$$internal$$PENDING) {
      enumerator._remaining--;

      if (state === lib$es6$promise$$internal$$REJECTED) {
        lib$es6$promise$$internal$$reject(promise, value);
      } else {
        enumerator._result[i] = value;
      }
    }

    if (enumerator._remaining === 0) {
      lib$es6$promise$$internal$$fulfill(promise, enumerator._result);
    }
  };

  lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function (promise, i) {
    var enumerator = this;

    lib$es6$promise$$internal$$subscribe(promise, undefined, function (value) {
      enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);
    }, function (reason) {
      enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);
    });
  };
  function lib$es6$promise$promise$all$$all(entries) {
    return new lib$es6$promise$enumerator$$default(this, entries).promise;
  }
  var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;
  function lib$es6$promise$promise$race$$race(entries) {
    /*jshint validthis:true */
    var Constructor = this;

    var promise = new Constructor(lib$es6$promise$$internal$$noop);

    if (!lib$es6$promise$utils$$isArray(entries)) {
      lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));
      return promise;
    }

    var length = entries.length;

    function onFulfillment(value) {
      lib$es6$promise$$internal$$resolve(promise, value);
    }

    function onRejection(reason) {
      lib$es6$promise$$internal$$reject(promise, reason);
    }

    for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {
      lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);
    }

    return promise;
  }
  var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;
  function lib$es6$promise$promise$resolve$$resolve(object) {
    /*jshint validthis:true */
    var Constructor = this;

    if (object && typeof object === 'object' && object.constructor === Constructor) {
      return object;
    }

    var promise = new Constructor(lib$es6$promise$$internal$$noop);
    lib$es6$promise$$internal$$resolve(promise, object);
    return promise;
  }
  var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;
  function lib$es6$promise$promise$reject$$reject(reason) {
    /*jshint validthis:true */
    var Constructor = this;
    var promise = new Constructor(lib$es6$promise$$internal$$noop);
    lib$es6$promise$$internal$$reject(promise, reason);
    return promise;
  }
  var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;

  var lib$es6$promise$promise$$counter = 0;

  function lib$es6$promise$promise$$needsResolver() {
    throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
  }

  function lib$es6$promise$promise$$needsNew() {
    throw new TypeError('Failed to construct \'Promise\': Please use the \'new\' operator, this object constructor cannot be called as a function.');
  }

  var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;
  /**
    Promise objects represent the eventual result of an asynchronous operation. The
    primary way of interacting with a promise is through its `then` method, which
    registers callbacks to receive either a promise’s eventual value or the reason
    why the promise cannot be fulfilled.
     Terminology
    -----------
     - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
    - `thenable` is an object or function that defines a `then` method.
    - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
    - `exception` is a value that is thrown using the throw statement.
    - `reason` is a value that indicates why a promise was rejected.
    - `settled` the final resting state of a promise, fulfilled or rejected.
     A promise can be in one of three states: pending, fulfilled, or rejected.
     Promises that are fulfilled have a fulfillment value and are in the fulfilled
    state.  Promises that are rejected have a rejection reason and are in the
    rejected state.  A fulfillment value is never a thenable.
     Promises can also be said to *resolve* a value.  If this value is also a
    promise, then the original promise's settled state will match the value's
    settled state.  So a promise that *resolves* a promise that rejects will
    itself reject, and a promise that *resolves* a promise that fulfills will
    itself fulfill.
      Basic Usage:
    ------------
     ```js
    var promise = new Promise(function(resolve, reject) {
      // on success
      resolve(value);
       // on failure
      reject(reason);
    });
     promise.then(function(value) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
     Advanced Usage:
    ---------------
     Promises shine when abstracting away asynchronous interactions such as
    `XMLHttpRequest`s.
     ```js
    function getJSON(url) {
      return new Promise(function(resolve, reject){
        var xhr = new XMLHttpRequest();
         xhr.open('GET', url);
        xhr.onreadystatechange = handler;
        xhr.responseType = 'json';
        xhr.setRequestHeader('Accept', 'application/json');
        xhr.send();
         function handler() {
          if (this.readyState === this.DONE) {
            if (this.status === 200) {
              resolve(this.response);
            } else {
              reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
            }
          }
        };
      });
    }
     getJSON('/posts.json').then(function(json) {
      // on fulfillment
    }, function(reason) {
      // on rejection
    });
    ```
     Unlike callbacks, promises are great composable primitives.
     ```js
    Promise.all([
      getJSON('/posts'),
      getJSON('/comments')
    ]).then(function(values){
      values[0] // => postsJSON
      values[1] // => commentsJSON
       return values;
    });
    ```
     @class Promise
    @param {function} resolver
    Useful for tooling.
    @constructor
  */
  function lib$es6$promise$promise$$Promise(resolver) {
    this._id = lib$es6$promise$promise$$counter++;
    this._state = undefined;
    this._result = undefined;
    this._subscribers = [];

    if (lib$es6$promise$$internal$$noop !== resolver) {
      if (!lib$es6$promise$utils$$isFunction(resolver)) {
        lib$es6$promise$promise$$needsResolver();
      }

      if (!(this instanceof lib$es6$promise$promise$$Promise)) {
        lib$es6$promise$promise$$needsNew();
      }

      lib$es6$promise$$internal$$initializePromise(this, resolver);
    }
  }

  lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;
  lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;
  lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;
  lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;

  lib$es6$promise$promise$$Promise.prototype = {
    constructor: lib$es6$promise$promise$$Promise,

    /**
      The primary way of interacting with a promise is through its `then` method,
      which registers callbacks to receive either a promise's eventual value or the
      reason why the promise cannot be fulfilled.
       ```js
      findUser().then(function(user){
        // user is available
      }, function(reason){
        // user is unavailable, and you are given the reason why
      });
      ```
       Chaining
      --------
       The return value of `then` is itself a promise.  This second, 'downstream'
      promise is resolved with the return value of the first promise's fulfillment
      or rejection handler, or rejected if the handler throws an exception.
       ```js
      findUser().then(function (user) {
        return user.name;
      }, function (reason) {
        return 'default name';
      }).then(function (userName) {
        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
        // will be `'default name'`
      });
       findUser().then(function (user) {
        throw new Error('Found user, but still unhappy');
      }, function (reason) {
        throw new Error('`findUser` rejected and we're unhappy');
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
      });
      ```
      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
       ```js
      findUser().then(function (user) {
        throw new PedagogicalException('Upstream error');
      }).then(function (value) {
        // never reached
      }).then(function (value) {
        // never reached
      }, function (reason) {
        // The `PedgagocialException` is propagated all the way down to here
      });
      ```
       Assimilation
      ------------
       Sometimes the value you want to propagate to a downstream promise can only be
      retrieved asynchronously. This can be achieved by returning a promise in the
      fulfillment or rejection handler. The downstream promise will then be pending
      until the returned promise is settled. This is called *assimilation*.
       ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // The user's comments are now available
      });
      ```
       If the assimliated promise rejects, then the downstream promise will also reject.
       ```js
      findUser().then(function (user) {
        return findCommentsByAuthor(user);
      }).then(function (comments) {
        // If `findCommentsByAuthor` fulfills, we'll have the value here
      }, function (reason) {
        // If `findCommentsByAuthor` rejects, we'll have the reason here
      });
      ```
       Simple Example
      --------------
       Synchronous Example
       ```javascript
      var result;
       try {
        result = findResult();
        // success
      } catch(reason) {
        // failure
      }
      ```
       Errback Example
       ```js
      findResult(function(result, err){
        if (err) {
          // failure
        } else {
          // success
        }
      });
      ```
       Promise Example;
       ```javascript
      findResult().then(function(result){
        // success
      }, function(reason){
        // failure
      });
      ```
       Advanced Example
      --------------
       Synchronous Example
       ```javascript
      var author, books;
       try {
        author = findAuthor();
        books  = findBooksByAuthor(author);
        // success
      } catch(reason) {
        // failure
      }
      ```
       Errback Example
       ```js
       function foundBooks(books) {
       }
       function failure(reason) {
       }
       findAuthor(function(author, err){
        if (err) {
          failure(err);
          // failure
        } else {
          try {
            findBoooksByAuthor(author, function(books, err) {
              if (err) {
                failure(err);
              } else {
                try {
                  foundBooks(books);
                } catch(reason) {
                  failure(reason);
                }
              }
            });
          } catch(error) {
            failure(err);
          }
          // success
        }
      });
      ```
       Promise Example;
       ```javascript
      findAuthor().
        then(findBooksByAuthor).
        then(function(books){
          // found books
      }).catch(function(reason){
        // something went wrong
      });
      ```
       @method then
      @param {Function} onFulfilled
      @param {Function} onRejected
      Useful for tooling.
      @return {Promise}
    */
    then: function then(onFulfillment, onRejection) {
      var parent = this;
      var state = parent._state;

      if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {
        return this;
      }

      var child = new this.constructor(lib$es6$promise$$internal$$noop);
      var result = parent._result;

      if (state) {
        var callback = arguments[state - 1];
        lib$es6$promise$asap$$default(function () {
          lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);
        });
      } else {
        lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);
      }

      return child;
    },

    /**
      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
      as the catch block of a try/catch statement.
       ```js
      function findAuthor(){
        throw new Error('couldn't find that author');
      }
       // synchronous
      try {
        findAuthor();
      } catch(reason) {
        // something went wrong
      }
       // async with promises
      findAuthor().catch(function(reason){
        // something went wrong
      });
      ```
       @method catch
      @param {Function} onRejection
      Useful for tooling.
      @return {Promise}
    */
    'catch': function _catch(onRejection) {
      return this.then(null, onRejection);
    }
  };
  function lib$es6$promise$polyfill$$polyfill() {
    var local;

    if (typeof global !== 'undefined') {
      local = global;
    } else if (typeof self !== 'undefined') {
      local = self;
    } else {
      try {
        local = Function('return this')();
      } catch (e) {
        throw new Error('polyfill failed because global object is unavailable in this environment');
      }
    }

    var P = local.Promise;

    if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {
      return;
    }

    local.Promise = lib$es6$promise$promise$$default;
  }
  var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;

  var lib$es6$promise$umd$$ES6Promise = {
    'Promise': lib$es6$promise$promise$$default,
    'polyfill': lib$es6$promise$polyfill$$default
  };

  /* global define:true module:true window: true */
  if (typeof define === 'function' && define['amd']) {
    define(function () {
      return lib$es6$promise$umd$$ES6Promise;
    });
  } else if (typeof module !== 'undefined' && module['exports']) {
    module['exports'] = lib$es6$promise$umd$$ES6Promise;
  } else if (typeof this !== 'undefined') {
    this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;
  }

  lib$es6$promise$polyfill$$default();
}).call(undefined);

// noop

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":11}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
		value: true
});

var _createClass = (function () {
		function defineProperties(target, props) {
				for (var i = 0; i < props.length; i++) {
						var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
				}
		}return function (Constructor, protoProps, staticProps) {
				if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
		};
})();

function _classCallCheck(instance, Constructor) {
		if (!(instance instanceof Constructor)) {
				throw new TypeError("Cannot call a class as a function");
		}
}

/**
  * @Prefix Class
  *
  * @description Handles prefixing for CSS properties and DOM events.
  * @returns {Object}
  */

var Prefix = (function () {

		/**
    * @constructor function
    *
    * @description Creates a map that holds non-prefixed properties and event names as keys and associated prefixes as values to test against.
    */

		function Prefix() {
				_classCallCheck(this, Prefix);

				this.testElement = document.createElement("div");
				this.prefixes = new Map();

				// Transforms
				this.prefixes.set("transform", ["-webkit-transform", "transform"]);
				this.prefixes.set("transform-origin", ["-webkit-transform-origin", "transform-origin"]);
				this.prefixes.set("transform-style", ["-webkit-transform-style", "transform-style"]);

				// Transitions
				this.prefixes.set("transition", ["-webkit-transition", "transition"]);
				this.prefixes.set("transition-delay", ["-webkit-transition-delay", "transition-delay"]);
				this.prefixes.set("transition-duration", ["-webkit-transition-duration", "transition-duration"]);
				this.prefixes.set("transition-property", ["-webkit-transition-property", "transition-property"]);
				this.prefixes.set("transition-timing-function", ["-webkit-transition-timing-function", "transition-timing-function"]);

				// Animations
				this.prefixes.set("keyframes", ["-webkit-", "-ms-", "-moz-", ""]);
				this.prefixes.set("animation", ["-webkit-animation", "-ms-animation", "-moz-animation", "animation"]);
				this.prefixes.set("animation-name", ["-webkit-animation-name", "-ms-animation-name", "-moz-animation-name", "animation-name"]);
				this.prefixes.set("animation-iteration-count", ["-webkit-animation-iteration-count", "-ms-animation-iteration-count", "-moz-animation-iteration-count", "animation-iteration-count"]);
				this.prefixes.set("animation-play-state", ["-webkit-animation-play-state", "-ms-animation-play-state", "-moz-animation-play-state", "animation-play-state"]);
				this.prefixes.set("animation-duration", ["-webkit-animation-duration", "-ms-animation-duration", "-moz-animation-duration", "animation-duration"]);
				this.prefixes.set("animation-delay", ["-webkit-animation-delay", "-ms-animation-delay", "-moz-animation-delay", "animation-delay"]);
				this.prefixes.set("animation-direction", ["-webkit-animation-direction", "-ms-animation-direction", "-moz-animation-direction", "animation-direction"]);
				this.prefixes.set("animation-fill-mode", ["-webkit-animation-fill-mode", "-ms-animation-fill-mode", "-moz-animation-fill-mode", "animation-fill-mode"]);

				// Transition / Animation end
				var WebkitTransition = "webkitTransitionEnd";
				var transition = "transitionend";
				var WebkitAnimation = "webkitAnimationEnd";
				var animation = "animationend";

				var transitionend = { WebkitTransition: WebkitTransition, transition: transition };
				var animationend = { WebkitAnimation: WebkitAnimation, animation: animation };

				this.prefixes.set("transitionend", transitionend);
				this.prefixes.set("animationend", animationend);
		}

		_createClass(Prefix, [{
				key: "getPrefix",

				/**
      * @getPrefix function
      *
      * @params {String} The non-prefixed CSS property / DOM event name to search the prefix map for.
      * @description Handles prefix queries by searching and testing properties and values in the prefix map against a HTMLElement's CSSStyleDeclaration.
      * @returns {String} The queried prefix.
      * @global yes
      */

				value: function getPrefix(prefix) {
						var _this = this;

						if (!this.prefixes.has(prefix)) {
								return false;
						} else if (prefix === "transitionend" || prefix === "animationend") {
								return this.getPrefixedEventName(prefix);
						} else if (prefix === "keyframes") {
								var keyframePrefix = this.prefixes.get(prefix).filter(function (f) {
										return _this.testElement.style[f + "animation-name"] !== undefined;
								})[0];
								return "@" + keyframePrefix + "keyframes";
						} else {
								return this.prefixes.get(prefix).filter(function (f) {
										return _this.testElement.style[f] !== undefined;
								})[0];
						}
				}
		}, {
				key: "getPrefixedEventName",

				/**
      * @getPrefixedEventName function
      *
      * @params {String} The non-prefixed DOM event name to search the prefix map for.
      * @description Tests a HTMLElement's CSSStyleDeclaration for supported DOM event prefixes.
      * @returns {String} The queried prefix.
      * @global no
      */

				value: function getPrefixedEventName(eventName) {
						var _this2 = this;

						var evtNames = this.prefixes.get(eventName);
						var matches = Object.keys(evtNames).filter(function (e) {
								return _this2.testElement.style[e] !== undefined;
						});
						return evtNames[matches[0]];
				}
		}]);

		return Prefix;
})();

;

exports["default"] = Prefix;
module.exports = exports["default"];

},{}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

function _classCallCheck(instance, Constructor) {
	if (!(instance instanceof Constructor)) {
		throw new TypeError("Cannot call a class as a function");
	}
}

/**
  * @SequenceWrapper Class
  *
  * @description Intercepts all sequences and returns a single or combo sequence depending on whether a single HTMLElement or Nodelist is used.
  * @returns {Promise}
  */

var SequenceWrapper =

/**
  * @constructor function
  *
  * @params {Object, Class, Class, Class, Class, Class, Class, Object}     
  * @description A wrapper that organises all sequences before they are launched. 
* @params description
- options {Object} Object of sequence options.
- DomUtils {Class} DOM utilities class.
- Prefix {Class} Prefix class.
- CssUtils {Class} CSS Utilities class.
- Promise {Class} Promise class.
- Sequence {Class} The sequence type (Transition / Animation).
- Combo {Class} Wrapper for multiple sequences.
- Tracker {Object} Object to store and track sequences through.
* @returns {Promise}
  */

function SequenceWrapper(options, DomUtils, Prefix, CssUtils, Promise, Sequence, Combo, Tracker) {
	_classCallCheck(this, SequenceWrapper);

	if (options.element.length) {
		var transitions = Array.from(options.element).map(function (element) {
			var opts = {};
			Object.keys(options).forEach(function (key) {
				opts[key] = options[key];
			});
			opts.element = element;
			Tracker.track(opts, Sequence);
			return new Sequence(opts, DomUtils, Prefix, CssUtils, Promise, Tracker);
		});
		return new Combo(transitions, Promise);
	} else {
		Tracker.track(options, Sequence);
		return new Sequence(options, DomUtils, Prefix, CssUtils, Promise, Tracker);
	}
};

exports["default"] = SequenceWrapper;
module.exports = exports["default"];

},{}],9:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () {
	function defineProperties(target, props) {
		for (var i = 0; i < props.length; i++) {
			var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
		}
	}return function (Constructor, protoProps, staticProps) {
		if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	};
})();

function _toConsumableArray(arr) {
	if (Array.isArray(arr)) {
		for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;
	} else {
		return Array.from(arr);
	}
}

function _classCallCheck(instance, Constructor) {
	if (!(instance instanceof Constructor)) {
		throw new TypeError("Cannot call a class as a function");
	}
}

/**
  * @Tracker Class
  *
  * @description Track all sequenced elements to allow sequences to be played / paused.
  * @returns {Object}
  */

var Tracker = (function () {

	/**
   * @constructor function
   *
   * @params {Class, Class, Class, Class}    
   * @description Initialise a single Map object to store sequenced elements. Only one instance per Animator is created.  
 * @params description
 - DomUtils {Class} DOM utilities class.
 - Prefix {Class} Prefix class.
 - CssUtils {Class} CSS Utilities class.
 - Transition {Class} Store the Transition protoype to compare against new sequence types passed in to the Tracker.
   */

	function Tracker(DomUtils, Prefix, CssUtils, Transition) {
		_classCallCheck(this, Tracker);

		this.tracker = new Map();
		this.tracker.set("Transitions", new Map());
		this.tracker.set("Animations", new Map());
		this.domUtils = new DomUtils();
		this.prefix = new Prefix();
		this.cssUtils = new CssUtils();
		this.transitionPrototype = Transition.prototype;
	}

	_createClass(Tracker, [{
		key: "track",

		/**
    * @track function
    *
    * @params {Object, Class}
    * @description Searches the Map for the element passed in and either updates it if found or creates a new entry in the Map for it.
    * @params description      
    *  - options: {Object} The sequence options.
       - Sequence : {Class} Either a Transition or Animation class.
    * @global no
    */

		value: function track(options, Sequence) {

			var transition = this.tracker.get("Transitions").get(options.element);
			var animation = this.tracker.get("Animations").get(options.element);

			if (Sequence.prototype === this.transitionPrototype) {
				if (!transition) {
					this.trackTransition(options);
				} else {
					this.updateTransitionRecord(transition, options);
				}
			} else {

				// A reference to the element will suffice if the sequence type is an Animation.
				// CSS Animations can be paused and played easily unlike transitions which are a bit trickier.
				if (!animation) {
					this.trackAnimation(options);
				}
			}
		}
	}, {
		key: "trackTransition",

		/**
    * @trackTransition function
    *
    * @params {Object}
    * @description Stores the element under the Transitions key in the Tracker Map 
    * 		and the transitioned properties / values set against the element.
    * @params description      
    *  - options: {Object} The transition sequence options.
    * @global no
    */

		value: function trackTransition(options) {

			var data = {};
			var transitions = this.tracker.get("Transitions");
			var transitionStyles = {};
			var tp = Animator.getPrefix("transition-property"),
			    tdur = Animator.getPrefix("transition-duration"),
			    ttf = Animator.getPrefix("transition-timing-function"),
			    tdel = Animator.getPrefix("transition-delay");

			transitionStyles[tp] = options.element.style[tp];
			transitionStyles[tdur] = options.element.style[tdur];
			transitionStyles[ttf] = options.element.style[ttf];
			transitionStyles[tdel] = options.element.style[tdel];
			data.transitionStyles = transitionStyles;

			if (options.setStyles && options.setStyles.before) {
				data.styles = options.setStyles.before;
			}

			if (options.addClass && options.addClass.before) {

				data.className = {
					before: options.element.className,
					after: options.addClass.before
				};
			}

			data.properties = Array.isArray(options.properties) ? [].concat(_toConsumableArray(options.properties)) : [options.properties];
			transitions.set(options.element, data);
		}
	}, {
		key: "trackAnimation",

		/**
    * @trackAnimation function
    *
    * @params {Object}
    * @description Stores an element under the Animations key in the Tracker Map.
    * @params description      
    *  - options: {Object} The animation sequence options.
    * @global no
    */

		value: function trackAnimation(options) {

			var data = {};
			var animations = this.tracker.get("Animations");
			animations.set(options.element, data);
		}
	}, {
		key: "updateTransitionRecord",

		/**
    * @updateTransitionRecord function
    *
    * @params {Object, Object}
    * @description Inserts additional transitioned properties / style rules set into an element's record.
    * @params description      
    *  - record: {Object} The transition record from the Tracker Map.
    *  - options: {Object} The transition sequence options.
    * @global no
    */

		value: function updateTransitionRecord(record, options) {

			var properties = Array.isArray(options.properties) ? [].concat(_toConsumableArray(options.properties)) : [options.properties];
			properties = properties.filter(function (property) {
				return record.properties.indexOf(property) === -1;
			});
			record.properties = [].concat(_toConsumableArray(record.properties), _toConsumableArray(properties));

			if (options.setStyles && options.setStyles.before) {
				if (!record.styles) {
					record.styles = {};
				}
				Object.keys(options.setStyles.before).forEach(function (property) {
					record.styles[property] = options.setStyles.before[property];
				});
			}
		}
	}, {
		key: "pause",

		/**
    * @pause function
    *
    * @description Iterates through every stored element in the Tracker and sets its CSS appropriately to effectively pause a sequence.
    * @global no
    */

		value: function pause() {
			var _this = this;

			var transitions = this.tracker.get("Transitions");
			var transitionElements = transitions.keys();
			var animations = this.tracker.get("Animations");
			var animationElements = animations.keys();

			while (true) {

				var element = animationElements.next(),
				    rule = {};
				if (element.done) {
					break;
				}

				rule[this.prefix.getPrefix("animation-play-state")] = "paused";
				this.cssUtils.setStyles(element.value, rule);
			}

			var _loop = function _loop() {

				var element = transitionElements.next(),
				    record = undefined,
				    rule = {};
				if (element.done) {
					return "break";
				}

				record = transitions.get(element.value);
				record.properties.forEach(function (property) {
					var rule = _this.cssUtils.getStyles(element.value, property);
					_this.cssUtils.setStyles(element.value, rule);
				});

				rule = {};
				rule[_this.prefix.getPrefix("transition")] = "none";
				_this.cssUtils.setStyles(element.value, rule);
			};

			while (true) {
				var _ret = _loop();

				if (_ret === "break") break;
			}
		}
	}, {
		key: "play",

		/**
    * @play function
    *
    * @description Iterates through every stored element in the Tracker and sets CSS style rules to continue a paused sequence.
    * @global no
    */

		value: function play() {
			var _this2 = this;

			var transitions = this.tracker.get("Transitions");
			var transitionElements = transitions.keys();
			var animations = this.tracker.get("Animations");
			var animationElements = animations.keys();

			while (true) {

				var element = animationElements.next(),
				    rule = {};
				if (element.done) {
					break;
				}

				rule[this.prefix.getPrefix("animation-play-state")] = "running";
				this.cssUtils.setStyles(element.value, rule);
			}

			var _loop2 = function _loop2() {

				var element = transitionElements.next();
				if (element.done) {
					return "break";
				}

				var record = transitions.get(element.value);
				_this2.cssUtils.setStyles(element.value, record.transitionStyles);
				if (record.className) {
					record.properties.forEach(function (prop) {
						element.value.style.removeProperty(prop);
					});
				}

				if (record.styles) {
					_this2.cssUtils.setStyles(element.value, record.styles);
				}
			};

			while (true) {
				var _ret2 = _loop2();

				if (_ret2 === "break") break;
			}
		}
	}, {
		key: "remove",

		/**
    * @remove function
    *
    * @params {String, HTMLElement}
    * @description Removes a stored element from the Tracker once a sequence is complete.
    * @params description      
    *  - type: {String} Map key, either Transitions or Animations.
    *  - element: {HTMLElement} The element to remove from the Tracker.
    * @global no
    */

		value: function remove(type, element) {
			this.tracker.get(type)["delete"](element);
		}
	}]);

	return Tracker;
})();

exports["default"] = Tracker;
module.exports = exports["default"];

},{}],10:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () {
	function defineProperties(target, props) {
		for (var i = 0; i < props.length; i++) {
			var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
		}
	}return function (Constructor, protoProps, staticProps) {
		if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
	};
})();

function _classCallCheck(instance, Constructor) {
	if (!(instance instanceof Constructor)) {
		throw new TypeError("Cannot call a class as a function");
	}
}

/**
  * @Transition Class
  *
  * @description Promise based transition handler that resolves when all transitions on an element are complete.
  * @returns {Resolved Promise}
  */

var Transition = (function () {

	/**
   * @constructor function
   *
   * @params {Object, Class, Class, Class, Class, Object}  
   * @description Creates a new transition sequence.    
 * @params description
 - options {Object} Transition options.
 	- element {HTMLElement} The element to set the transition on.
 	- properties {String / Array} A string or array of strings of CSS properties that are being transitioned.
 	- setStyles {Object} Styles to be set before / after the transition.
 		- before {Object} Object of CSS property / value pairs to be set before the transition.
 		- after {Object} Object of CSS property / value pairs to be set after the transition.
 	- addClass {Object} Object of classnames to be set before / after the transition.
 		- before {String} Classname to set before the transition.
 		- after {String} Classname to set after the transition.
 	- removeClass {Object} Object of classnames to be removed before / after the transition.
 		- before {String} Classname to be removed before the transition.
 		- after {String} Classname to be removed after the transition.
 - DomUtils {Class} Dom utility class.
 - Prefix {Class} Prefix class.
 - CssUtils {Class} CSS Utilities class.
 - Promise {Class} Promise class.
 - Tracker {Object} Object that tracks and monitors sequences.
 * @returns {Promise}
   */

	function Transition(options, DomUtils, Prefix, CssUtils, Promise, Tracker) {
		var _this = this;

		_classCallCheck(this, Transition);

		this.options = options;
		this.domUtils = new DomUtils();
		this.prefix = new Prefix().getPrefix("transitionend");
		this.cssUtils = new CssUtils();
		this.onTransitionEnd = this.transitionEnd.bind(this);
		this.totaltransitions = Array.isArray(options.properties) ? options.properties.length : 1;
		this.transitionendCount = 0;
		this.tracker = Tracker;

		return new Promise(function (resolve, reject) {
			_this.resolve = resolve;
			_this.reject = reject;
			_this.animationFrame = requestAnimationFrame(_this.transitionStart.bind(_this));
		});
	}

	_createClass(Transition, [{
		key: "transitionStart",

		/**
    * @transitionStart function
    *
    * @description Sets classnames / style rules to trigger the transition.
    * @global no
    */

		value: function transitionStart() {

			var opts = this.options;
			opts.element.addEventListener(this.prefix, this.onTransitionEnd, false);

			if (opts.setStyles && opts.setStyles.before) {
				this.cssUtils.setStyles(opts.element, opts.setStyles.before);
			}

			if (opts.removeClass && opts.removeClass.before) {
				this.domUtils.setClass(opts.element, opts.removeClass.before, false);
			}

			if (opts.addClass && opts.addClass.before) {
				this.domUtils.setClass(opts.element, opts.addClass.before, true);
			}
		}
	}, {
		key: "transitionEnd",

		/**
    * @transitionEnd function
    *
    * @description Sets classnames / style rules after all transitions have occurred and removes the element from the tracker.
    * @global no
    * @returns {Resolved Promise}
    */

		value: function transitionEnd() {

			var opts = this.options;
			this.transitionendCount++;

			if (this.transitionendCount === this.totaltransitions) {

				opts.element.removeEventListener(this.prefix, this.onTransitionEnd, false);
				cancelAnimationFrame(this.animationFrame);

				if (opts.setStyles && opts.setStyles.after) {
					this.cssUtils.setStyles(opts.element, opts.setStyles.after);
				}

				if (opts.removeClass && opts.removeClass.after) {
					this.domUtils.setClass(opts.element, opts.removeClass.after, false);
				}

				if (opts.addClass && opts.addClass.after) {
					this.domUtils.setClass(opts.element, opts.addClass.after, true);
				}

				this.tracker.remove("Transitions", opts.element);
				this.resolve(opts.element);
			}
		}
	}]);

	return Transition;
})();

exports["default"] = Transition;
module.exports = exports["default"];

},{}],11:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            currentQueue[queueIndex].run();
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (!draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
